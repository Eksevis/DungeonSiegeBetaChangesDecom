// Animation Skrit: attack_random
//
// History:
//		VERSION 1.0:	Initial implementation
//		VERSION 2.0:	Converted to WorldMessages 
//						Added SFX event tests
//						Uses owner, rather than ASPECT arg
//												
//
// Notes: This chore assumes we have the following
// animations to work with: (from the template GAS file)
//
//		00 = at;
//		01 = at-02;
//

property int MAJORVERSION$ = 2;
property int MINORVERSION$ = 0;

owner = Aspect;


/////////////////////////////////////////////////////////////////////////////
// Per Skrit Object storage

/////////////////////////////////////////////////////////////////////////////
// Utilities

RestartChore$ ( ) { 

	int numanims$ = owner.GetCurrentActiveChore().NumSubAnimsForActiveStance();

	int newanim$ = 0;

	if (numanims$ > 0) {
		// pick a random animation 
		newanim$ = Math.RandomInt( 0,numanims$-1);
	} else {
		return;
	}

	owner.GetCurrentActiveChore().ResetTimeWarp();

	int bg$ = owner.GetCurrentActiveChore().OpenBlendGroup();
	owner.GetCurrentActiveChore().AddAnimToBlendGroup(newanim$,1);
	owner.GetCurrentActiveChore().CloseBlendGroup();
	owner.GetCurrentActiveChore().SetBlendGroupWeight(bg$,1);

	owner.UpdateTimeline(0);

	int numofevents$ = owner.GetNumberOfEventsInActiveChore(ANIMEVENT_FIRE_WEAPON);
	if (numofevents$ == 0) 
	{
		string prsfile$ = owner.GetCurrentActiveChore().GetBlendedPRSDebugName(0);
	 	report.errorf( "Missing FIRE event!\nCharacter [%s]\nAnimation %d: [%s]\n\nPlease check the appropriate PRS/MAX file\n" ,owner.GetDebugName() ,newanim$, prsfile$);
	}

}

/////////////////////////////////////////////////////////////////////////////
// States

//----------------------------

startup state AttackOnce$ 
{

	event OnStartChore$ ( int /*subanim$*/, int /*flags$*/ )
	{
		RestartChore$ ( );
	}

	event OnUpdate$( float delta_t$, float /* speed_bias$ */)
	{

 	 	int events$ = owner.UpdateTimeline( delta_t$ );

		if (AnimEventBitTest(events$,ANIMEVENT_SFX_1)) {
			PostWorldMessage( WE_ANIM_SFX, owner.goid,  1, 0 );
		}
		if (AnimEventBitTest(events$,ANIMEVENT_SFX_2)) {
			PostWorldMessage( WE_ANIM_SFX, owner.goid,  2, 0 );
		}
		if (AnimEventBitTest(events$,ANIMEVENT_SFX_3)) {
			PostWorldMessage( WE_ANIM_SFX, owner.goid,  3, 0 );
		}
		if (AnimEventBitTest(events$,ANIMEVENT_SFX_4)) {
			PostWorldMessage( WE_ANIM_SFX, owner.goid,  4, 0 );
		}
		if (AnimEventBitTest(events$,ANIMEVENT_BEGIN_SWING)) {
			PostWorldMessage( WE_ANIM_WEAPON_SWUNG, owner.goid, 0, 0 );
		}
		if (AnimEventBitTest(events$,ANIMEVENT_END_SWING)) {
			PostWorldMessage( WE_ANIM_WEAPON_SWUNG, owner.goid, 1, 0 );
		}
		if (AnimEventBitTest(events$,ANIMEVENT_LEFT_FOOT_DOWN)) {
			PostWorldMessage( WE_ANIM_OTHER, owner.goid, 'lfdn', 0 );
		}
		if (AnimEventBitTest(events$,ANIMEVENT_RIGHT_FOOT_DOWN)) {
			PostWorldMessage( WE_ANIM_OTHER, owner.goid, 'rfdn', 0 );
		}
 		if (AnimEventBitTest(events$,ANIMEVENT_FIRE_WEAPON)) {
			PostWorldMessage( WE_ANIM_WEAPON_FIRE, owner.goid, owner.CurrentReqBlock, 0 );
		}
		if (AnimEventBitTest(events$,ANIMEVENT_FINISH)) {
			PostWorldMessage( WE_ANIM_DONE, owner.goid, owner.CurrentReqBlock, 0 );
			SetState HoldAtEnd$;
		}
	}
}

state HoldAtEnd$ 
{
	event OnStartChore$ ( int /*subanim$*/, int /*flags$*/ )
	{
		RestartChore$ ( );
		SetState AttackOnce$;
	}

}