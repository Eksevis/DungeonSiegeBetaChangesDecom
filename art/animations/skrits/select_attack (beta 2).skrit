// Animation Skrit: select_attack
//
// History:
//		VERSION 1.0:	Initial implementation
//		VERSION 2.0:	Converted to WorldMessages 
//						Added SFX event tests
//						Uses owner, rather than ASPECT arg
//		VERSION 3.0:	Added support for projectile attack elevation
//		VERSION 4.0:	Added support for blended melee attacks
//		VERSION 5.0:	Added support for magic casting
//		VERSION 5.1:	Added support for spinning minigun muzzle
//		VERSION 5.2:	Added support for melee weapon tracers
//		VERSION 5.3:	Removed support for melee weapon tracers
//												

property int MAJORVERSION$ = 5;
property int MINORVERSION$ = 3;

owner = Aspect;

int m_QuickFightingFidget$;	
		
int m_Middle$;
int m_Higher$;
int m_Lower$;
float m_PrevRatio$;
float m_CurrRatio$;
bool m_NeedThreeAnims$;
int m_FadeIn$;
int m_FadeOut$;
int m_BG$;

float m_ActualTime$;
float m_ScaledTime$;
float m_FadeInTime$;
float m_FadeOutTime$;

float m_ScaledDelta$;
float m_TimeScale$;
float m_AttackDuration$;
//float m_FidgetDuration$;
//float m_FidgetTimeScale$;
float m_RequestedAttackDuration$;

/////////////////////////////////////////////////////////////////////////////
// Utilities

UpdateDuration$(float delta_time$)
{
	m_ActualTime$ += delta_time$;
	m_ScaledDelta$ = delta_time$ * m_TimeScale$;
	m_ScaledTime$ += m_ScaledDelta$;
}

CalculateDurations$ () 
{
	float fidgettime$ = 0;
	if (m_AttackDuration$ < (m_RequestedAttackDuration$-m_FadeInTime$))
 	{
		 // Take some time to transition to this anim
		 // and make sure that the animation we use is cyclic
		fidgettime$ = (m_RequestedAttackDuration$-m_FadeInTime$)-m_AttackDuration$;

		m_FadeOutTime$ = Math.MinFloat(0.2,fidgettime$*0.5);

		int bg$ = owner.blender.OpenBlendGroup();
		owner.blender.AddAnimToBlendGroup(m_QuickFightingFidget$,1,true);
		owner.blender.CloseBlendGroupWithTransition(m_FadeOutTime$,true);
		owner.blender.SetBlendGroupWeight(bg$,1);

		m_TimeScale$ = 1;
	
	}
	else
	{
		m_TimeScale$ = m_AttackDuration$/m_RequestedAttackDuration$;
		m_FadeOutTime$ = 0;
	}

	float twdur$ = owner.blender.DurationOfCurrentTimeWarp();
	float twtime$ = owner.blender.TimeOfCurrentTimeWarp();
//	report.genericf("ATTACK: %20s req:%5.3f: att %5.3f tw: %5.2f twct: %5.2f in: %5.2f out: %5.2f fdg: %5.2f tscl: %5.2f \n",
//	 owner.GetDebugName(),m_RequestedAttackDuration$,m_AttackDuration$,twdur$,twtime$,m_FadeInTime$,m_FadeOutTime$,fidgettime$,m_TimeScale$);

	m_ActualTime$ = 0;
	m_ScaledTime$ = 0;
}

RestartMelee$ (  int meleeanim$, int flags$ ) 
{ 

	// subtract the fidget animation from the total 
	int numanims$ = owner.Blender.GetNumSubAnims();

	if (numanims$ <= meleeanim$ || (meleeanim$ == m_QuickFightingFidget$ ))
	{
		meleeanim$ = 0;
	}

	m_AttackDuration$ = owner.Blender.GetDuration(meleeanim$);

	m_RequestedAttackDuration$ = DecodeAttackLoopDuration (flags$);
	if ( m_RequestedAttackDuration$ < 0 )
	{
		m_RequestedAttackDuration$ = m_AttackDuration$;
	}

	int bg$ = owner.blender.OpenBlendGroup();
	owner.blender.AddAnimToBlendGroup(meleeanim$,1);

	m_FadeInTime$ = Math.MinFloat(0.25,m_AttackDuration$*0.25);

	owner.blender.CloseBlendGroupWithTransition(m_FadeInTime$,false); // Take some time to merge in this anim

	owner.blender.SetBlendGroupWeight(bg$,1);

	CalculateDurations$();

	owner.UpdateBlender(0);

//	int numofevents$ = owner.GetNumberOfEvents(ANIMEVENT_FIRE_WEAPON);
//	if (numofevents$ == 0) 
//	{
//		string prsfile$ = owner.blender.GetBlendedPRSDebugName(0);
//	 	report.errorf( "Missing FIRE event!\nCharacter [%s]\nAnimation %d: [%s]\n\nPlease check the appropriate PRS/MAX file\n" ,owner.GetDebugName() ,meleeanim$, prsfile$);
//	}

}

RecalcBlendRatios$()
{

	if (m_ActualTime$ <= (m_AttackDuration$*0.5))
	{
		m_FadeOut$ = -1;

	   	float t$ = 0;
		float dt$ = owner.blender.DurationOfCurrentTimeWarp();
	   	if (dt$ != 0)
		{
		   	t$ = Math.FilterSmoothStep(0,m_AttackDuration$*0.5,m_ActualTime$);
		}

		float a$ = t$ * m_CurrRatio$;
		float b$ = ((1-m_PrevRatio$)*(1-t$)) + ((1-m_CurrRatio$) *t$);
		float c$ = (1-t$)* m_PrevRatio$;

		owner.blender.SetBlendGroupAnimWeight(m_BG$,0,b$);

		if (m_NeedThreeAnims$)
		{
			owner.blender.SetBlendGroupAnimWeight(m_BG$,1,a$);
			owner.blender.SetBlendGroupAnimWeight(m_BG$,2,c$);
		} 
		else
		{
			a$ += c$;
			c$ = 0;
			owner.blender.SetBlendGroupAnimWeight(m_BG$,1,a$);
		}
	}
	else
	{
		m_FadeOut$ = -1;
	}

}

RestartProjectile$ (  int newanim$, int flags$ )
{ 

	m_PrevRatio$ = m_CurrRatio$;

	float elevation$ = DecodeAttackElevation(flags$);

	m_AttackDuration$ = owner.Blender.GetDuration(newanim$);

	m_RequestedAttackDuration$ = DecodeAttackLoopDuration (flags$);
	if ( m_RequestedAttackDuration$ <= 0 )
	{
		m_RequestedAttackDuration$ = m_AttackDuration$;
	}

	m_BG$ = owner.blender.OpenBlendGroup();
	owner.blender.AddAnimToBlendGroup(m_Middle$,1);

	m_CurrRatio$ = 1;

	if (elevation$ >= 0)
	{
		m_FadeIn$ = m_Higher$;
		if (elevation$ <= 0.5)
		{
			m_CurrRatio$ = elevation$*1.5;
		}
	}
	else
	{
		m_FadeIn$ = m_Lower$;
		if (elevation$ > -0.5)
		{
			m_CurrRatio$ = elevation$*-1.5;
		}
	}

	owner.blender.AddAnimToBlendGroup(m_FadeIn$,0);

  	if ((m_FadeOut$ == -1) || (m_FadeOut$ == m_FadeIn$))
	{
		m_NeedThreeAnims$ = false;
	} 
	else 
	{
		owner.blender.AddAnimToBlendGroup(m_FadeOut$,0);
		m_NeedThreeAnims$ = true;
	}

   //	owner.blender.CloseBlendGroup();
	m_FadeInTime$ = Math.MinFloat(0.25,m_AttackDuration$*0.25);
	owner.blender.CloseBlendGroupWithTransition(m_FadeInTime$,false); 
	owner.blender.SetBlendGroupWeight(m_BG$,1);

	m_FadeOut$ = m_FadeIn$;
 
	RecalcBlendRatios$();

	CalculateDurations$();

	owner.UpdateBlender(0);

}

RestartChore$ ( int subanim$, int flags$ )
 {

 	m_RequestedAttackDuration$ = 0;
 
 	if( (owner.ChoreStance == AS_BOW_AND_ARROW)||(owner.ChoreStance == AS_MINIGUN))
	{
		RestartProjectile$(subanim$,flags$);
	}
	else
	{
		m_CurrRatio$ = 0;
		m_FadeOut$ = -1;
		RestartMelee$(subanim$,flags$);
	}

}

/////////////////////////////////////////////////////////////////////////////
// States

//----------------------------

startup state AttackOnce$ 
{

	event OnStartChore$ ( int subanim$, int flags$ )
	{

		// Both CHORE_ATTACK and CHORE_MAGIC use this skrit 
		eAnimChore ch$ = owner.GetCurrentChore();

		m_QuickFightingFidget$ = owner.Blender.GetSubAnimIndex('qffg');		

		if ((owner.ChoreStance == AS_BOW_AND_ARROW)||(owner.ChoreStance == AS_MINIGUN))
		{
			m_Middle$ = owner.Blender.GetSubAnimIndex('0mid');
			m_Higher$ = owner.Blender.GetSubAnimIndex('high');
			m_Lower$  = owner.Blender.GetSubAnimIndex('loww');

			if ( (m_Middle$<0) || (m_Higher$<0) || (m_Lower$<0) )
			{
				m_Middle$ = 0;
				m_Higher$ = 0;
				m_Lower$ = 0;
			}

			m_PrevRatio$ = 0;
			m_CurrRatio$ = 0;
			m_FadeIn$ = -1;
			m_FadeOut$ = -1;
			m_NeedThreeAnims$ = false;

		}

		RestartChore$ ( subanim$, flags$ );
	}

	event OnUpdate$( float delta_t$ )
	{

		UpdateDuration$(delta_t$);

		if (owner.ChoreStance == AS_BOW_AND_ARROW)
		{
			RecalcBlendRatios$();
		}
		else if (owner.ChoreStance == AS_MINIGUN)
		{
			RecalcBlendRatios$();
		}

 	 	int events$ = owner.UpdateBlender(  m_ScaledDelta$ );

		if (AnimEventBitTest(events$,ANIMEVENT_SFX_1)) {
			PostWorldMessage( WE_ANIM_SFX, owner.goid, owner.goid,  1, 0 );
		}
		if (AnimEventBitTest(events$,ANIMEVENT_SFX_2)) {
			PostWorldMessage( WE_ANIM_SFX, owner.goid, owner.goid,  2, 0 );
		}
		if (AnimEventBitTest(events$,ANIMEVENT_SFX_3)) {
			PostWorldMessage( WE_ANIM_SFX, owner.goid, owner.goid,  3, 0 );
		}
		if (AnimEventBitTest(events$,ANIMEVENT_SFX_4)) {
			PostWorldMessage( WE_ANIM_SFX, owner.goid, owner.goid,  4, 0 );
		}
		if (AnimEventBitTest(events$,ANIMEVENT_ATTACH_AMMO)) {
			PostWorldMessage( WE_ANIM_ATTACH_AMMO, owner.goid, owner.goid, owner.CurrentReqBlock, 0 );
		}
 		if (AnimEventBitTest(events$,ANIMEVENT_FIRE_WEAPON)) {
			PostWorldMessage( WE_ANIM_WEAPON_FIRE, owner.goid, owner.goid, owner.CurrentReqBlock, 0 );
		}
		if (AnimEventBitTest(events$,ANIMEVENT_HIDE_MESH)) {
			owner.SetHideMeshFlag(true);
		}
		if (AnimEventBitTest(events$,ANIMEVENT_SHOW_MESH)) {
			owner.SetHideMeshFlag(false);
		}
		if (m_RequestedAttackDuration$ > 0)
		{
			if (m_RequestedAttackDuration$ <= m_ActualTime$)
			{
				PostWorldMessage( WE_ANIM_DONE, owner.goid, owner.goid, owner.CurrentReqBlock, 0 );
				SetState (LoopAtEnd$);
			}
		}
		else
		{
			if (AnimEventBitTest(events$,ANIMEVENT_FINISH)) {
				PostWorldMessage( WE_ANIM_DONE, owner.goid, owner.goid, owner.CurrentReqBlock, 0 );
				SetState (HoldAtEnd$);
			}
 		}
	}
}

state HoldAtEnd$ 
{
	event OnStartChore$ ( int subanim$, int flags$ )
	{
		RestartChore$ ( subanim$, flags$ );
		SetState AttackOnce$;
	}
}

state LoopAtEnd$
{
	event OnStartChore$ ( int subanim$, int flags$ )
	{
		RestartChore$ ( subanim$, flags$ );
		SetState AttackOnce$;
	}

	event OnUpdate$( float delta_t$ )
	{

		UpdateDuration$(delta_t$);

		if ((owner.ChoreStance == AS_BOW_AND_ARROW)||(owner.ChoreStance == AS_MINIGUN))
		{
			RecalcBlendRatios$();
		}

 	 	owner.UpdateBlender(  m_ScaledDelta$ );
	}
}