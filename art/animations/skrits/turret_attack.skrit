// Animation Skrit: select_attack
//
// History:
//		VERSION 1.0:	Initial implementation
//
// Notes:
//		This skrit is for monsters that cannot move and turn their whole
//		bodies. Instead the must morph or rotate some portion to
//		face the target
//
//		The server will send both an elevation (vertical) and deviation (horizontal) to
//		be used to determine the 
//												

property int MAJORVERSION$ = 1;
property int MINORVERSION$ = 0;

owner = Aspect;

int m_QuickFightingFidget$;	
		
int m_Middle$;
int m_Left$;
int m_Right$;
float m_CurrRatio$;
int m_FadeIn$;
int m_BG$;

float m_ActualTime$;
float m_ScaledTime$;
float m_FadeInTime$;
float m_FadeOutTime$;

float m_ScaledDelta$;
float m_TimeScale$;
float m_AttackDuration$;
float m_RequestedAttackDuration$;

/////////////////////////////////////////////////////////////////////////////
// Utilities

UpdateDuration$(float delta_time$)
{
	m_ActualTime$ += delta_time$;
	m_ScaledDelta$ = delta_time$ * m_TimeScale$;
	m_ScaledTime$ += m_ScaledDelta$;
}

CalculateDurations$ () 
{
	float fidgetduration$ = owner.GetCurrentActiveChore().SubAnimDurationForActiveStance(m_QuickFightingFidget$);

	float fidgettime$ = 0;
	if (m_AttackDuration$ < (m_RequestedAttackDuration$-m_FadeInTime$))
 	{
		 // Take some time to transition to this anim
		 // and make sure that the animation we use is cyclic
		fidgettime$ = (m_RequestedAttackDuration$-m_FadeInTime$)-m_AttackDuration$;

		m_FadeOutTime$ = Math.MinFloat(0.4,fidgettime$*0.5);

		int bg$ = owner.GetCurrentActiveChore().OpenBlendGroup();
		owner.GetCurrentActiveChore().AddAnimToBlendGroup(m_QuickFightingFidget$,1,true);
		owner.GetCurrentActiveChore().CloseBlendGroupWithTransition(m_FadeOutTime$,true);
		owner.GetCurrentActiveChore().SetBlendGroupWeight(bg$,1);

		m_TimeScale$ = 1;

	}
	else
	{
		m_TimeScale$ = m_AttackDuration$/m_RequestedAttackDuration$;
		m_FadeOutTime$ = 0;
	}

	float twdur$ = owner.GetCurrentActiveChore().DurationOfCurrentTimeWarp();
	float twtime$ = owner.GetCurrentActiveChore().TimeOfCurrentTimeWarp();
//	report.genericf("ATTACK: %20s dur: %5.2f ctime %5.2f in: %5.2f out: %5.2f fdg: %5.2f tscl: %5.2f \n", owner.GetDebugName(),twdur$,twtime$,m_FadeInTime$,m_FadeOutTime$,fidgettime$,m_TimeScale$);

	m_ActualTime$ = 0;
	m_ScaledTime$ = 0;
}



RestartChore$ ( int subanim$, int flags$ )
{
 	m_RequestedAttackDuration$ = 0;

//	owner.GetCurrentActiveChore().ResetTimeWarp();

	float deviation$ = DecodeAttackDeviation(flags$);

Report.genericf("deviation %f\n",	deviation$);

	m_AttackDuration$ = owner.GetCurrentActiveChore().SubAnimDurationForActiveStance(subanim$);

	m_RequestedAttackDuration$ = DecodeAttackLoopDuration (flags$);
	if ( m_RequestedAttackDuration$ <= 0 )
	{
		m_RequestedAttackDuration$ = m_AttackDuration$;
	}

	m_FadeInTime$ = Math.MinFloat(0.50,m_RequestedAttackDuration$*0.25);

	m_CurrRatio$ = 1;

	 /// the DRAGON attack is asymetric (yuck)!  
	 /// I eyeballed it at 45deg to the left and around 70deg to the right

	if (deviation$ >= 0)
	{
		m_FadeIn$ = m_Left$;
		if (deviation$ <= 0.25)
		{
			m_CurrRatio$ = deviation$*4;
		}
	}
	else
	{
		m_FadeIn$ = m_Right$;
		if (deviation$ > -0.375)
		{
		   m_CurrRatio$ = deviation$*-2.66;
		}
	}

Report.genericf("curr_ratio %f\n",	m_CurrRatio$);

	m_BG$ = owner.GetCurrentActiveChore().OpenBlendGroup();
	owner.GetCurrentActiveChore().AddAnimToBlendGroup(m_Middle$,1-m_CurrRatio$);
 	owner.GetCurrentActiveChore().AddAnimToBlendGroup(m_FadeIn$,m_CurrRatio$);

	owner.GetCurrentActiveChore().CloseBlendGroupWithTransition(m_FadeInTime$,false);

	owner.GetCurrentActiveChore().SetBlendGroupWeight(m_BG$,1);

	CalculateDurations$();

	owner.UpdateTimeline(0);

}

/////////////////////////////////////////////////////////////////////////////
// States

//----------------------------

startup state AttackOnce$ 
{

	event OnStartChore$ ( int subanim$, int flags$ )
	{

		m_QuickFightingFidget$ = owner.GetSubAnimForChoreFourCC(CHORE_ATTACK,'qffg');		
		m_Middle$ = owner.GetSubAnimForChoreFourCC(CHORE_ATTACK,'loc0');
		m_Left$   = owner.GetSubAnimForChoreFourCC(CHORE_ATTACK,'lol1');
		m_Right$  = owner.GetSubAnimForChoreFourCC(CHORE_ATTACK,'lor1');

		if ( (m_Middle$<0) || (m_Right$<0) || (m_Left$<0) )
		{
			m_Middle$ = 0;
			m_Right$ = 0;
			m_Left$ = 0;
		}

		m_CurrRatio$ = 0;
 
		m_FadeIn$ = -1;
 
		RestartChore$ ( subanim$, flags$ );
	}

	event OnUpdate$( float delta_t$, float /* speed_bias$ */)
	{

		UpdateDuration$(delta_t$);

 	 	int events$ = owner.UpdateTimeline(  m_ScaledDelta$ );

		if (AnimEventBitTest(events$,ANIMEVENT_SFX_1)) {
			PostWorldMessage( WE_ANIM_SFX, owner.goid,  1, 0 );
		}
		if (AnimEventBitTest(events$,ANIMEVENT_SFX_2)) {
			PostWorldMessage( WE_ANIM_SFX, owner.goid,  2, 0 );
		}
		if (AnimEventBitTest(events$,ANIMEVENT_SFX_3)) {
			PostWorldMessage( WE_ANIM_SFX, owner.goid,  3, 0 );
		}
		if (AnimEventBitTest(events$,ANIMEVENT_SFX_4)) {
			PostWorldMessage( WE_ANIM_SFX, owner.goid,  4, 0 );
		}
		if (AnimEventBitTest(events$,ANIMEVENT_ATTACH_AMMO)) {
			PostWorldMessage( WE_ANIM_ATTACH_AMMO, owner.goid, 0, 0 );
		}
		if (AnimEventBitTest(events$,ANIMEVENT_BEGIN_SWING)) {
			PostWorldMessage( WE_ANIM_WEAPON_SWUNG, owner.goid, 0, 0 );
		}
		if (AnimEventBitTest(events$,ANIMEVENT_END_SWING)) {
			PostWorldMessage( WE_ANIM_WEAPON_SWUNG, owner.goid, 1, 0 );
		}
 		if (AnimEventBitTest(events$,ANIMEVENT_FIRE_WEAPON)) {
			PostWorldMessage( WE_ANIM_WEAPON_FIRE, owner.goid, owner.CurrentReqBlock, 0 );
		}
		if (m_RequestedAttackDuration$ > 0)
		{
			if (m_RequestedAttackDuration$ <= m_ActualTime$)
			{
				PostWorldMessage( WE_ANIM_DONE, owner.goid, owner.CurrentReqBlock, 0 );
				SetState (LoopAtEnd$);
			}
		}
		else
		{
			if (AnimEventBitTest(events$,ANIMEVENT_FINISH)) {
				PostWorldMessage( WE_ANIM_DONE, owner.goid, owner.CurrentReqBlock, 0 );
				SetState (HoldAtEnd$);
			}
 		}
	}
}

state HoldAtEnd$ 
{
	event OnStartChore$ ( int subanim$, int flags$ )
	{
		RestartChore$ ( subanim$, flags$ );
		SetState AttackOnce$;
	}
}

state LoopAtEnd$
{
	event OnStartChore$ ( int subanim$, int flags$ )
	{
		RestartChore$ ( subanim$, flags$ );
		SetState AttackOnce$;
	}

	event OnUpdate$( float delta_t$, float /* speed_bias$ */)
	{

		UpdateDuration$(delta_t$);
 	 	owner.UpdateTimeline(  m_ScaledDelta$ );
	}
}