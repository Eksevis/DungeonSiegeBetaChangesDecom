/*
  ============================================================================
  ----------------------------------------------------------------------------

	File		: 	brain_fury.skrit

	Author(s)	: 	Eric Tams

	Purpose		:	Customized brain for the Fury
	
	Expected Behavior	: The fury should rest until an enemy comes into range.
					When an enemy comes too close the fury should wake up and 
					scream at the players shaking the camera. The fury should then
					Zap any party members who come near.

	(C)opyright 2001 Gas Powered Games, Inc.

  ----------------------------------------------------------------------------
  ============================================================================
*/


Go		m_Go$;
GoMind	m_Mind$;
Job		m_Job$;
Goid	m_Target$;
Go		m_Spell$;

startup state STARTUP$
{
}
////////////////////////////////////////////////////////////////////////////////

#include "k_job_c_attack-utils" 

////////////////////////////////////////////////////////////////////////////////
//	init

event OnJobInitPointers$( Job job$ )
{
	m_Job$		= job$;
	m_Go$		= job$.Go;
	m_Mind$		= job$.Go.Mind;
	m_Target$	= Goid.invalidgoid;
}


event OnJobInit$( Job job$ )
{
	OnJobInitPointers$( job$ );
	
	
	SetState Resting$;
}

event OnWorldMessage$( eWorldEvent e$, WorldMessage /*msg$*/ )
{
	if( e$ == WE_KILLED ) 
	{
		SetState Dying$;
	}
}
////////////////////////////////////////////////////////////////////////////////
//  Helper Functions

////////////////////////////////////////
//	PlayAnim

bool PlayAnim$( int Anim$ )
{
	if (Anim$ >= 0)
	{
		eReqRetCode ret$ = MCPManager.MakeRequest( m_Job$.Id, m_Go$.Goid, PL_PLAYANIM, CHORE_MISC, Anim$, 0 );
		return true;	
	}
	return false;
}


////////////////////////////////////////////////////////////////////////////////
//  State Machine

state Resting$
{
	transition
	{
		-> Resting$:	OnWorldMessage( WE_ANIM_DONE );
		-> WakeUp$:		OnWorldMessage( WE_ENEMY_SPOTTED );
	}
	event OnEnterState$
	{
		int sleepanim$ = m_Go$.Aspect.AspectHandle.GetSubAnimForChoreFourCC(CHORE_MISC,'slep');
		PlayAnim$(sleepanim$);
	}
}

state WakeUp$
{
	transition
	{
		-> Awake$:	OnWorldMessage( WE_ANIM_DONE );
	}
	event OnEnterState$
	{
		Siegefx.RunScript("fury_scream",m_Go$.goid,m_Go$.goid,"",m_Go$.goid, WE_ANIM_DONE );
		int wakeanim$ = m_Go$.Aspect.AspectHandle.GetSubAnimForChoreFourCC(CHORE_MISC,'wake');
		PlayAnim$(wakeanim$);
	}
}

state Awake$
{
	event OnEnterState$
	{
		if( m_Mind$.EnemiesVisible() )
		{				
			SetState RequestAction$;
		}
		else
		{
			SetState Fidgeting$;
		}
	}
}


state Fidgeting$
{
	transition
	{
		-> Awake$:	OnWorldMessage( WE_ANIM_DONE );
	}
	event OnEnterState$
	{
		int fidganim$ = m_Go$.Aspect.AspectHandle.GetSubAnimForChoreFourCC(CHORE_MISC,'fidg');
		PlayAnim$(fidganim$);
	}
}

state RequestAction$
{
	transition
	{
		-> RequestAction$:	OnWorldMessage( WE_JOB_TIMER_DONE );
	}

	event OnEnterState$
	{
		m_Job$.SetTimer( m_Mind$.SensorScanPeriod );
	
		if( m_Mind$.EnemiesVisible() )
		{	
			m_Mind$.TempGopColl1.Clear;
			m_Go$.Inventory.ListItems( QT_SPELL, il_main, m_Mind$.TempGopColl1 );
		
			int num_spells$ = m_Mind$.TempGopColl1.Size();
			
			//report.genericf( "num: %d\n", num_spells$ );
			
			m_Spell$ = m_Mind$.TempGopColl1.Get(Math.RandomInt( 0, Math.MaxInt( 0, num_spells$-1 ) ));
			
			//report.genericf( "Template Name: %s\n", m_Spell$.TemplateName );
			
			m_Target$ = m_Mind$.GetClosestEnemy().goid;
			
			ResetPathFindingParameters$();
			
			if( m_Spell$.Magic.ManaCost < m_Go$.Aspect.CurrentMana )
			{
				int anim$ = 0;
				
				if ( m_Spell$.TemplateName == "spell_fury_zap_0" ) {
					anim$ = 0; }
				else if ( m_Spell$.TemplateName == "spell_fury_zap_1" ) {
					anim$ = 1; }
				else if ( m_Spell$.TemplateName == "spell_fury_zap_2" ) {
					anim$ = 2; }
				else if ( m_Spell$.TemplateName == "spell_fury_zap_3" ) {
					anim$ = 3; }
				else if ( m_Spell$.TemplateName == "spell_fury_zap_4" ) {
					anim$ = 4; }
				else if ( m_Spell$.TemplateName == "spell_fury_zap_5" ) {
					anim$ = 5; }
				else if ( m_Spell$.TemplateName == "spell_fury_zap_6" ) {
					anim$ = 6; }
				else if ( m_Spell$.TemplateName == "spell_fury_zap_7" ) {
					anim$ = 6; }
				else { anim$ = Math.RandomInt( 0, 6 ); }
				
				float cast_loop_duration$ = m_Spell$.Magic.CastReloadDelay;
				
				eReqRetCode ret$ = MCPManager.MakeRequest( m_Job$.Id,
													m_Go$.Goid,
													PL_CAST_ON_OBJECT,
													cast_loop_duration$,
													anim$,
													m_Target$,
													m_LookAhead$, m_MaxApproachTime$,
													m_Spell$.Magic.CastRange
													);
				if( RequestFailed(ret$)	)
				{		   
					SetState Awake$ ;
				}
				else
				{
					if ( anim$ == 0 ) {
					Siegefx.RunScript("fury_charge",m_Go$.goid,m_Go$.goid,"[0]",m_Go$.goid, WE_ANIM_DONE );}
					else if ( anim$ == 1 ) {
					Siegefx.RunScript("fury_charge",m_Go$.goid,m_Go$.goid,"[1]",m_Go$.goid, WE_ANIM_DONE ); }
					else if ( anim$ == 2 ) {
					Siegefx.RunScript("fury_charge",m_Go$.goid,m_Go$.goid,"[2]",m_Go$.goid, WE_ANIM_DONE ); }
					else if ( anim$ == 3 ) {
					Siegefx.RunScript("fury_charge",m_Go$.goid,m_Go$.goid,"[3]",m_Go$.goid, WE_ANIM_DONE ); }
					else if ( anim$ == 4 ) {
					Siegefx.RunScript("fury_charge",m_Go$.goid,m_Go$.goid,"[4]",m_Go$.goid, WE_ANIM_DONE ); }
					else if ( anim$ == 5 ) {
					Siegefx.RunScript("fury_charge",m_Go$.goid,m_Go$.goid,"[5]",m_Go$.goid, WE_ANIM_DONE ); }
					else if ( anim$ == 6 ) {
					Siegefx.RunScript("fury_charge_big",m_Go$.goid,m_Go$.goid,"",m_Go$.goid, WE_ANIM_DONE ); }
					
					
					SetState Casting$ ;
				}
			}
			else
			{
				SetState Fidgeting$;
			}
		}
		else
		{
			SetState Awake$;
		}
	}
}

state ContinueAction$
{
	// We arrive at this state after we receive a 'WE_MCP_MUTUAL_DEPENDANCY' message
	// or if the characters is within range and we want to ignore any WE_MCP_MUTUAL_DEPENDANCY

	event OnEnterState$
	{
		SetState Casting$;
	}
}

state Casting$
{

	transition
	{
		//-> RequestAction$:			OnWorldMessage( WE_MCP_DEPENDANCY_BROKEN );
		-> RequestAction$:			OnWorldMessage( WE_MCP_SECTION_COMPLETE_WARNING );
		-> RequestAction$:			OnWorldMessage( WE_ANIM_DONE );
	}

	trigger OnWorldMessage$( WE_ANIM_WEAPON_FIRE )
	{
		m_Spell$.Magic.SCast( m_Target$.go );
	}

}

state Dying$
{
}