/*
  ============================================================================
  ----------------------------------------------------------------------------

	File		: 	job_talk_kelti.skrit

	Author(s)	: 	David Tomandl, Eric Tams, Chad Queen, Bartosz Kijanka

	Purpose		: 	Custom talk job for Kelti, a quest gal in Elddim.

	(C)opyright 2001 Gas Powered Games, Inc.

  ----------------------------------------------------------------------------
  ============================================================================
*/

Go		m_Go$;
GoMind	m_Mind$;
GoBody  m_Body$;
Job		m_Job$;
Goid	m_Target$;

#include "k_job_c_mcp_fidget_utils"
#include "k_job_c_talk_utils"

startup state STARTUP$
{
}

////////////////////////////////////////////////////////////////////////////////
//	init
event OnJobInitPointers$( Job job$ )
{
	m_Job$		= job$;
	m_Go$		= job$.Go;
	m_Mind$		= job$.Go.Mind;
	m_Body$		= job$.Go.Body;
}

event OnJobInit$( Job job$ )
{
	OnJobInitPointers$( job$ );

	m_Target$	= job$.GoalObject;

	SetState Talk$;
}

////////////////////////////////////////////////////////////////////////////////
//	blab blab away... pretend you're Lee on coffee
state Talk$
{
	transition
	{
		-> Exiting$:	OnWorldMessage( WE_REQ_TALK_END ) =
		{
			StartFidgetIfRequired$();
		}
	}

	trigger OnWorldMessage$( WE_ANIM_DONE )
	{
		TryAnim$('talk');
	}

	event OnEnterState$
	{
		#only( game )
		[[
			if( GameAuditor.GetDb.GetBool( "d_0x032007b5" ) )
			{
				m_Go$.GetConversation.RSSelectConversation( "zconversation_directions" );
				GameAuditor.GetDb.SetBool( "d_0x032007b5", false );
			}
			else if ( GameAuditor.GetDb.GetBool( "turn_world_red" ) ) {
				m_Go$.GetConversation.RSSelectConversation( "conversation_kelti_red" );
			} 
			else if ( Victory.IsQuestCompleted( "quest_townstones" ))
			{
				m_Go$.GetConversation.RSSelectConversation( "conversation_hub_complete" );
			} 
			else if ( ( !Victory.IsQuestActive( "quest_elddim" )) && ( !Victory.IsQuestActive( "quest_townstones" )) && 
				( Goid.InValidGoid == UIPartyManager.DoesActivePartyHaveTemplate( "stone_glb_elddim_01", m_Target$ )) )
			{
				m_Go$.GetConversation.RSSelectConversation( "conversation_kelti" );
			} 
			else if ( ( Victory.IsQuestActive( "quest_elddim" )) &&
				( Goid.InValidGoid == UIPartyManager.DoesActivePartyHaveTemplate( "stone_glb_elddim_01", m_Target$ )) )
			{
				m_Go$.GetConversation.RSSelectConversation( "conversation_kelti_local" );
			}
			else if ( ( Victory.IsQuestActive( "quest_elddim" )) &&
				( Goid.InValidGoid != UIPartyManager.DoesActivePartyHaveTemplate( "stone_glb_elddim_01", m_Target$ )) &&
				( Goid.InValidGoid == UIPartyManager.DoesActivePartyHaveTemplate( "ring_utraean", m_Target$ )) )
			{
				m_Go$.GetConversation.RSSelectConversation( "conversation_kelti_quest" );
				if ( !GameAuditor.GetDb.GetBool( "kelti_conversation_quest_one" ) )
				{
					GameAuditor.GetDb.SetBool( "kelti_conversation_quest_one", true );
				}
				else
				{
					if ( !GameAuditor.GetDb.GetBool( "kelti_conversation_quest_two" ) )
					{
						GameAuditor.GetDb.SetBool( "kelti_conversation_quest_two", true );
						// The second time that this conversation gets played, this item is supposed to be given to the player
						SiegePos SpawnPos$;
						GoCloneReq cloneReq$ = MakeGoCloneReq( "ring_utraean" );
						
						SpawnPos$ = m_Target$.go.placement.position;
						cloneReq$.StartingPos	= SpawnPos$;
					    
						if( m_Target$.Go.Hasmind )
						{
							if( AIQuery.FindSpotRelativeToSource( m_Target$.Go, .25, .5, 2.0, m_Target$.Go.Mind.TempPos1 ) )
					   		{
					   			cloneReq$.StartingPos = m_Target$.Go.Mind.TempPos1;
					   		}
					   	}	
						cloneReq$.SnapToTerrain = true;
				        GoDb.SCloneGo( cloneReq$ );
					}
				}
			}
			else if ( Victory.IsQuestActive( "goto_crystwind" )) {
				m_Go$.GetConversation.RSSelectConversation( "conversation_kelti_goto" );
			}
			else if ( ( !Victory.IsQuestActive( "quest_elddim" )) &&
				( Goid.InValidGoid != UIPartyManager.DoesActivePartyHaveTemplate( "stone_glb_elddim_01", m_Target$ )) &&
				( Goid.InValidGoid == UIPartyManager.DoesActivePartyHaveTemplate( "ring_utraean", m_Target$ )) )
			{
				m_Go$.GetConversation.RSSelectConversation( "conversation_kelti_stone" );
				if ( !GameAuditor.GetDb.GetBool( "kelti_conversation_quest_one" ) )
				{
					GameAuditor.GetDb.SetBool( "kelti_conversation_quest_one", true );
				}
				else if ( !GameAuditor.GetDb.GetBool( "kelti_conversation_quest_two" ) )
				{
					GameAuditor.GetDb.SetBool( "kelti_conversation_quest_two", true );
				}
				else if ( !GameAuditor.GetDb.GetBool( "kelti_conversation_quest_three" ) )
				{
					GameAuditor.GetDb.SetBool( "kelti_conversation_quest_three", true );
				}
				else if ( !GameAuditor.GetDb.GetBool( "kelti_conversation_quest_four" ) )
				{
					GameAuditor.GetDb.SetBool( "kelti_conversation_quest_four", true );
					// The fourth time that this conversation gets played, this item is supposed to be given to the player
					SiegePos SpawnPos$;
					GoCloneReq cloneReq$ = MakeGoCloneReq( "ring_utraean" );
					
					SpawnPos$ = m_Target$.go.placement.position;
					cloneReq$.StartingPos	= SpawnPos$;
				    
					if( m_Target$.Go.Hasmind )
					{
						if( AIQuery.FindSpotRelativeToSource( m_Target$.Go, .25, .5, 2.0, m_Target$.Go.Mind.TempPos1 ) )
				   		{
				   			cloneReq$.StartingPos = m_Target$.Go.Mind.TempPos1;
				   		}
				   	}	
					cloneReq$.SnapToTerrain = true;
			        GoDb.SCloneGo( cloneReq$ );
				}
			}
			else if ( ( !Victory.IsQuestActive( "quest_elddim" )) &&
				( Goid.InValidGoid != UIPartyManager.DoesActivePartyHaveTemplate( "stone_glb_elddim_01", m_Target$ )) &&
				( Goid.InValidGoid != UIPartyManager.DoesActivePartyHaveTemplate( "ring_utraean", m_Target$ )) )
			{
				m_Go$.GetConversation.RSSelectConversation( "conversation_kelti_stone_ring" );
			}
			else
			{
				if ( !Victory.IsQuestActive( "quest_elddim" )) { report.generic("No quest_elddim for you!\n"); }
				if ( Victory.IsQuestActive( "quest_elddim" )) { report.generic("You have quest_elddim!\n"); }
			
				Report.Error( "TELL SARAH: Kelti doesn't have a conversation set up for this condition!  Sarah will need to know what quests you have, what states they are in, and what quest items you have (or don't have)." );
				m_Go$.GetConversation.RSSelectConversation( "conversation_kelti" );
			}
			TryAnim$('talk');
			m_Go$.GetConversation.RSActivateDialogue();
		]]
	}
}

////////////////////////////////////////////////////////////////////////////////
//	finish blabbing
state Exiting$
{
	event OnEnterState$
	{
		m_Job$.MarkForDeletion();
	}
}
