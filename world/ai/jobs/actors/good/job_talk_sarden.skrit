/*
  ============================================================================
  ----------------------------------------------------------------------------

	File		: 	job_talk_sarden.skrit

	Author(s)	: 	David Tomandl, Eric Tams, Chad Queen, Bartosz Kijanka

	Purpose		: 	Custom talk job for another multiplayer world quest-giver.

	(C)opyright 2001 Gas Powered Games, Inc.

  ----------------------------------------------------------------------------
  ============================================================================
*/

Go		m_Go$;
GoMind	m_Mind$;
GoBody  m_Body$;
Job		m_Job$;
Goid	m_Target$;

#include "k_job_c_mcp_fidget_utils"
#include "k_job_c_talk_utils"

startup state STARTUP$
{
}

////////////////////////////////////////////////////////////////////////////////
//	init
event OnJobInitPointers$( Job job$ )
{
	m_Job$		= job$;
	m_Go$		= job$.Go;
	m_Mind$		= job$.Go.Mind;
	m_Body$		= job$.Go.Body;
}

event OnJobInit$( Job job$ )
{
	OnJobInitPointers$( job$ );

	m_Target$	= job$.GoalObject;

	SetState Talk$;
}

////////////////////////////////////////////////////////////////////////////////
//	blab blab away... pretend you're Lee on coffee
state Talk$
{
	transition
	{
		-> Exiting$:	OnWorldMessage( WE_REQ_TALK_END ) =
		{
			StartFidgetIfRequired$();
		}
		-> Exiting$:	OnWorldMessage( WE_ANIM_DONE ) =
		{
			StartFidgetIfRequired$();
		}
		
	}

	event OnEnterState$
	{
		#only( game )
		[[
			if ( GameAuditor.GetDb.GetBool( "d_0x00c00377" ) )
			{
				m_Go$.GetConversation.RSSelectConversation( "zconversation_directions" );
				GameAuditor.GetDb.SetBool( "d_0x00c00377", false );
			}
			else if ( GameAuditor.GetDb.GetBool( "turn_world_red" ) ) {
				m_Go$.GetConversation.RSSelectConversation( "conversation_sarden_red" );
			} 
			else if ( Victory.IsQuestCompleted( "quest_townstones" ) )
			{
				m_Go$.GetConversation.RSSelectConversation( "conversation_sarden_all_complete" );
			}
			else if ( Goid.InValidGoid == UIPartyManager.DoesActivePartyHaveTemplate( "ring_utraean", m_Target$ ))
			{
				m_Go$.GetConversation.RSSelectConversation( "conversation_sarden" );
			} 
			// All of the below conditions assume that you have the ring, naturally
			else if ( Victory.IsQuestActive( "goto_fallrean" ))
			{
				m_Go$.GetConversation.RSSelectConversation( "conversation_sarden_goto" );
			} 
			else if ( Victory.IsQuestActive( "quest_crystwind" ))
			{
				if ( Goid.InValidGoid == UIPartyManager.DoesActivePartyHaveTemplate( "stone_glb_crystwind_01", m_Target$ ))
				{
					m_Go$.GetConversation.RSSelectConversation( "conversation_sarden_quest" );
				}
				else
				{
					m_Go$.GetConversation.RSSelectConversation( "conversation_sarden_complete" );
					// Give reward in second conversation block
					if ( !GameAuditor.GetDb.GetBool( "sarden_first_conversation" ) ) {
						GameAuditor.GetDb.SetBool( "sarden_first_conversation", true );
					}
					else if ( !GameAuditor.GetDb.GetBool( "sarden_gave_reward" ) )
					{
						GameAuditor.GetDb.SetBool( "sarden_gave_reward", true );
						SiegePos SpawnPos$;
						GoCloneReq cloneReq$ = MakeGoCloneReq( "book_glb_placeholder" );
						
						SpawnPos$ = m_Target$.go.placement.position;
						cloneReq$.StartingPos	= SpawnPos$;
					    
						If( m_Target$.Go.Hasmind )
						{
							if( AIQuery.FindSpotRelativeToSource( m_Target$.Go, 1, 1.5, 2.0, m_Target$.Go.Mind.TempPos1 ) )
					   		{
								cloneReq$.StartingPos = m_Target$.Go.Mind.TempPos1;
					   		}
					   	}	
						cloneReq$.SnapToTerrain = true;
						GoDb.SCloneGo( cloneReq$ );
					}
				}
			} 
			else if ( !Victory.IsQuestActive( "quest_crystwind" ))
			{
				if ( Goid.InValidGoid == UIPartyManager.DoesActivePartyHaveTemplate( "stone_glb_crystwind_01", m_Target$ ))
				{
					m_Go$.GetConversation.RSSelectConversation( "conversation_sarden_ring" );
				}
				else
				{
					m_Go$.GetConversation.RSSelectConversation( "conversation_sarden_stone" );
					// Give reward on third conversation
					if ( !GameAuditor.GetDb.GetBool( "sarden_first_conversation" ) ) {
						GameAuditor.GetDb.SetBool( "sarden_first_conversation", true );
					}
					else if ( !GameAuditor.GetDb.GetBool( "sarden_second_conversation" ) ) {
						GameAuditor.GetDb.SetBool( "sarden_second_conversation", true );
					}
					else if ( !GameAuditor.GetDb.GetBool( "sarden_gave_reward" ) )
					{
						GameAuditor.GetDb.SetBool( "sarden_gave_reward", true );
						SiegePos SpawnPos$;
						GoCloneReq cloneReq$ = MakeGoCloneReq( "book_glb_placeholder" );
						
						SpawnPos$ = m_Target$.go.placement.position;
						cloneReq$.StartingPos	= SpawnPos$;
					    
						If( m_Target$.Go.Hasmind )
						{
							if( AIQuery.FindSpotRelativeToSource( m_Target$.Go, 1, 1.5, 2.0, m_Target$.Go.Mind.TempPos1 ) )
					   		{
								cloneReq$.StartingPos = m_Target$.Go.Mind.TempPos1;
					   		}
					   	}	
						cloneReq$.SnapToTerrain = true;
						GoDb.SCloneGo( cloneReq$ );
					}
				}
			} 
			else
			{
				Report.Error( "TELL SARAH: (Mine town) Sarden doesn't have a conversation set up for this condition!  Sarah will need to know what quests you have, what states they are in, and what quest items you have (or don't have)." );
				m_Go$.GetConversation.RSSelectConversation( "conversation_guard_captain_fallraen" );
			}
			StartFidgetIfRequired$();
			m_Go$.GetConversation.RSActivateDialogue();
		]]
	}
}


////////////////////////////////////////////////////////////////////////////////
//	finish blabbing
state Exiting$
{
	event OnEnterState$
	{
		m_Job$.MarkForDeletion();
	}
}
