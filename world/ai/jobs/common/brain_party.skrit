/*
  ============================================================================
  ----------------------------------------------------------------------------

	File		: 	brain_party.skrit

	Author(s)	: 	Bartosz Kijanka

	Purpose		:	Coordinates the collective automatic behavior of a party.


	Expected Behavior:
	------------------

		The party brain will execute periodically ( every sensor scan period ) seconds
		and try to take action.  The party brain will try to take action only with party
		members who are NOT already 'busy' AND who have permissions set which allow
		them to take automatic actions.  The party beain operates in two passes:
		Defensive and Offensive.  Currently the brain favors Defensive.  Meaning; the
		brain will always try to perform a Defensive action before an Offensive one.
		If the brain finds that it can't perform a Defensive action, it will try to
		take Offensive action.


	The Defensive pass:

		Find a party member with the lowest life.  Find an idle party party member
		with the with the most mana and best healing spell and who has permission
		to heal others, and have him cast it on the weak guy.

		If nobody is low on life, proceed to find a party member with low mana.  Then
		find an idle party member who has a mana xfer spell and has permission to
		auto-use it.  Cast it on the weak guy.


	Offensive pass:

		Find a party member who is currently least likely to survive the near future, based
		on the enemies that have engaged him.  If there are any idle members, take the 
		toughest one and have him attack the toughest attacker of the weak guy.


	Current permissions the party brain looks at are:

		Mind.ActorAutoHealsOthersLife
		Mind.ActorAutoXfersMana
		Mind.ActorAutoDefendsOthers


	(C)opyright 2001 Gas Powered Games, Inc.

  ----------------------------------------------------------------------------
  ============================================================================
*/


Go		m_Go$;
GoMind	m_Mind$;
GoParty m_Party$;
Job		m_Job$;


startup state STARTUP$
{
}


////////////////////////////////////////////////////////////////////////////////
//	init
event OnJobInitPointers$( Job job$ )
{
	m_Job$		= job$;
	m_Go$		= job$.Go;
	m_Mind$		= job$.Go.Mind;
	m_Party$	= job$.Go.Party;
}


event OnJobInit$( Job job$ )
{
	OnJobInitPointers$( job$ );

	SetState Thinking$;
}




////////////////////////////////////////////////////////////////////////////////
//	helper functions


////////////////////////////////////////
//	
bool MayRespondToAttack$( Go attacker$, Go target$ )
{
	if( target$ == NULL )
	{
		return( false );
	}

	if( attacker$.Mind.CombatOrders == CO_HOLD )
	{
		return( false );
	}

	if( attacker$.Mind.MovementOrders == MO_HOLD )
	{
		float rangeToTarget$ = attacker$.Mind.WeaponRange + attacker$.Mind.PersonalSpaceRange;

		if target$.HasMind()
		{
			rangeToTarget$ += target$.mind.PersonalSpaceRange;
		}
		else
		{
			rangeToTarget$ += target$.aspect.BoundingSphereRadius;
		}

		// $$$ hack hack hack to be consistent with job_attack_object_melee.skrit

		rangeToTarget$ *= 0.9;
		rangeToTarget$ *= 1.35;	// a little stricter than job_attack_object_melee.skrit

		if( !AIQuery.IsInRange( attacker$.Placement.Position, target$.Placement.Position, rangeToTarget$ ) )
		{
			return( false );
		}
	}

	if( IsAlive( attacker$.LifeState ) && IsAlive( target$.LifeState ) )
	{
		if( !target$.HasActor )
		{
			return( false );
		}
		else
		{
			return( true );
		}
	}
	return( false );
}


////////////////////////////////////////
//	function ThinkDefense
bool ThinkDefense$()
{
	m_Party$.TempGopCollA.Clear();
	m_Party$.TempGopCollB.Clear();
	m_Party$.TempGopCollC.Clear();

	if( m_Go$.Children.Size < 2 )
	{
		return( false );
	}

	////////////////////////////////////////
	//	find IDLE members to help
	if( !AIQuery.Get( QT_IDLE, m_Go$.Children, m_Party$.TempGopCollA ) )
	{
		return( false );
	}

	if( AIQuery.GetMin( QT_LIFE_LOW, m_Go$.Children, m_Party$.TempGopCollB ) )
	{
		report.reportf( "aiskrit", "%s: found weakest member to heal\n",m_Go$.TemplateName );

		////////////////////////////////////////////////////////////////////////////////
		//	help member with low LIFE

		////////////////////////////////////////
		//	find the weakest party member
		Go weakMember$ = m_Party$.TempGopCollB.Get( 0 );

		////////////////////////////////////////
		//	find member to cast heal spell
		int i$ = 0;
		int iend$ = m_Party$.TempGopCollA.Size();

		Go helper$ 		= NULL;
		Go bestHelper$	= NULL;
		Go bestSpell$	= NULL;

		while( i$ != iend$ )
		{
			if( !m_Party$.TempGopCollA.Get( i$ ).Mind.ActorAutoHealsOthersLife )
			{
				i$ += 1;
				continue;
			}
			helper$ = m_Party$.TempGopCollA.Get( i$ );


			float maxHealing$ = -1;

			////////////////////////////////////////
			//	find the most healing spell this guy can cast
			helper$.Mind.TempQtColl1.Clear;
			helper$.Mind.TempQtColl1.Add( QT_SPELL );
			helper$.Mind.TempQtColl1.Add( QT_CASTABLE );
			helper$.Mind.TempQtColl1.Add( QT_LIFE_HEALING );

			m_Party$.TempGopCollC.Clear;
			helper$.Mind.GetAutoItems( helper$.Mind.TempQtColl1, m_Party$.TempGopCollC );
			Go spell$ = AIQuery.GetMax( QT_LIFE_HEALING, m_Party$.TempGopCollC );

			////////////////////////////////////////
			//	compare spell and log if best one thus far
			if( spell$ != NULL )
			{
				float currentHealing$ = AIQuery.GetTraitValue( spell$, QT_LIFE_HEALING );

				if( maxHealing$ < currentHealing$ )
				{
					maxHealing$ 	= currentHealing$;
					bestHelper$ 	= helper$;
					bestSpell$		= spell$;
				}
			}
			i$ += 1;
		}

		////////////////////////////////////////
		//	cast healing spell
		if( bestHelper$ != NULL )
		{
			bestHelper$.Mind.SDoJob( MakeJobReq( JAT_CAST, JQ_ACTION, QP_FRONT, JO_PARTY, weakMember$.Goid, bestSpell$.Goid ) );
			return( true );
		}
	}
	else if ( AIQuery.GetMin( QT_MANA_LOW, m_Go$.Children, m_Party$.TempGopCollB ) )
	{
		////////////////////////////////////////////////////////////////////////////////
		//	help member with low MANA
		Go weakMember$ = m_Party$.TempGopCollB.Get( 0 );
		m_Party$.TempGopCollB.Clear();

		////////////////////////////////////////
		//	find member to cast mana xfer with
		int i$ 		= 0;
		int iend$ 	= m_Party$.TempGopCollA.Size();

		Go helper$	= NULL;
		Go spell$	= NULL;

		while( i$ != iend$ )
		{
			if( !m_Party$.TempGopCollA.Get( i$ ).Mind.ActorAutoXfersMana )
			{
				i$ += 1;
				continue;
			}
			helper$ = m_Party$.TempGopCollA.Get( i$ );

			////////////////////////////////////////
			//	eliminate candidate who is already transferring mana
			if( helper$.Inventory.IsSpellInProgress( "spell_mana_channel" ) )
			{
				i$ += 1;
				continue;
			}

			////////////////////////////////////////
			//	look for mana xfer spell in inventory
			if( !helper$.Mind.GetAutoItems( QT_SPELL, m_Party$.TempGopCollC ) )
			{
				i$ += 1;
				continue;
			}

			int j$ 		= 0;
			int jend$	= m_Party$.TempGopCollC.Size();

			while( j$ != jend$ )
			{
				if( m_Party$.TempGopCollC.Get(j$).TemplateName == "spell_mana_channel" )	// $$$ is this comparison allowed in Skrit?
				{
					// candidate must have enough mana for spell to be cast
					if( spell$.Magic.ManaCost < helper$.Aspect.CurrentMana )
					{
						spell$ = m_Party$.TempGopCollC.Get(j$);
						break;
					}
				}
				j$ += 1;
			}

			if( helper$ && spell$ )
			{
				break;
			}

			i$ += 1;
		}

		////////////////////////////////////////
		//	cast mana xfer spell
		if( helper$ && spell$ )
		{
			helper$.Mind.SDoJob( MakeJobReq( JAT_CAST, JQ_ACTION, QP_FRONT, JO_PARTY, helper$.Goid, spell$.Goid ) );
			return( true );
		}
	}
	else
	{
		return( false );
	}

	////////////////////////////////////////
	//	catch-all: took no action
	return( false );
}


////////////////////////////////////////
//	function ThinkOffense
bool ThinkOffense$()
{
	if( m_Go$.Children.Size < 2 )
	{
		return( false );
	}

	m_Party$.TempGopCollA.Clear;
	m_Party$.TempGopCollB.Clear;
	m_Party$.TempGopCollC.Clear;

	////////////////////////////////////////
	//	check the living
	if( !AIQuery.Get( QT_ALIVE_CONSCIOUS, m_Go$.Children, m_Party$.TempGopCollA ) )
	{
		report.reportf( "aiskrit", "%s: can't find alive members\n",m_Go$.TemplateName );
		return( false );
	}

	////////////////////////////////////////
	//	get the fighting  actor who is most in trouble
	if( !AIQuery.Get( QT_FIGHTING, m_Party$.TempGopCollA, m_Party$.TempGopCollC ) )
	{
		return( false );
	}

	if( !AIQuery.GetMin( QT_SURVIVAL_FACTOR, m_Party$.TempGopCollC, m_Party$.TempGopCollB ) )
	{
		report.reportf( "aiskrit", "%s: can't find weakest member\n",m_Go$.TemplateName );
		return( false );
	}

	Go member$ = m_Party$.TempGopCollB.Get( 0 );
	m_Party$.TempGopCollA.Clear;
	m_Party$.TempGopCollB.Clear;

	////////////////////////////////////////
	//	pick toughest enemy to attack back
	member$.Mind.GetEngagedMeEnemies( m_Party$.TempGopCollA );
	Go toughestEnemy$ = AIQuery.GetMax( QT_OFFENSE_FACTOR, m_Party$.TempGopCollA );
	m_Party$.TempGopCollA.Clear;

	////////////////////////////////////////
	//	find idle members to help
	if( !AIQuery.Get( QT_IDLE, m_Go$.Children, m_Party$.TempGopCollA ) )
	{
		report.reportf( "aiskrit", "%s: can't find idle member\n",m_Go$.TemplateName );
		return( false );
	}

	////////////////////////////////////////
	//	find the buffest idle member
	if( !AIQuery.GetMaxN( QT_OFFENSE_FACTOR, 50, m_Party$.TempGopCollA, m_Party$.TempGopCollB ) )
	{
		report.reportf( "aiskrit", "%s: can't find buffest\n",m_Go$.TemplateName );
		return( false );
	}

	Go helper$ = NULL;
	int ih$ = 0;
	int iend$ = m_Party$.TempGopCollB.Size();

	report.reportf( "aiskrit", "%s:picking helper\n",m_Go$.TemplateName );

	while( ih$ != iend$ )
	{
		if( !m_Party$.TempGopCollB.Get( ih$ ).Mind.ActorAutoDefendsOthers )
		{
			ih$ += 1;
			continue;
		}
		else if( !MayRespondToAttack$( m_Party$.TempGopCollB.Get( ih$ ), toughestEnemy$ ) )
		{
			ih$ += 1;
			continue;
		}
		else
		{
			helper$ = m_Party$.TempGopCollB.Get( ih$ );
			break;
		}
		ih$ += 1;
	}

	////////////////////////////////////////
	//	

	// $$$ attack toughest enemy...
	if( toughestEnemy$ != NULL && helper$ != NULL )
	{
		helper$.Mind.SDoJob( MakeJobReq( JAT_ATTACK_OBJECT, JQ_ACTION, QP_FRONT, JO_PARTY, toughestEnemy$.Goid ) );
		return( true );
	}

	return( false );
}


////////////////////////////////////////////////////////////////////////////////
//	main state machine
state Thinking$
{
	transition
	{
		-> Thinking$:		OnWorldMessage( WE_JOB_TIMER_DONE );
	}
/*
	////////////////////////////////////////
	//	process messages sent to party members

	event OnCCWorldMessage$( eWorldEvent e$, WorldMessage msg$ )
	{
	}

	////////////////////////////////////////
	//	process messages sent to party

	event OnWorldMessage$( eWorldEvent e$, WorldMessage msg$ )
	{
	}
*/
	event OnEnterState$
	{
		m_Job$.SetTimer( m_Mind$.SensorScanPeriod );

		if( !ThinkDefense$() )
		{
			ThinkOffense$();
		}
		return;
	}
}
