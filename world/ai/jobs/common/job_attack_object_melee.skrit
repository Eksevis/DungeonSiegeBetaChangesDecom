/*
  ============================================================================
  ----------------------------------------------------------------------------

	File		: job_attack_object_melee.skrit

	Author(s)	: Bartosz Kijanka, biddle

	Purpose		: This is a basic, walk-over-to-the-guy and beat him with a
				  club/sword/bare hands job.

	(C)opyright 2000 Gas Powered Games, Inc.

  ----------------------------------------------------------------------------
  ============================================================================
*/


Go		m_Go$;
GoMind	m_Mind$;
GoBody  m_Body$;
Job		m_Job$;
Go		m_Weapon$;

float	m_RangeToTarget$;
Goid	m_Target$;
int 	m_Effect_ID$;

////////////////////////////////////////////////////////////////////////////////

#include "k_job_c_attack-utils" 

////////////////////////////////////////////////////////////////////////////////

startup state STARTUP$
{
}

////////////////////////////////////////////////////////////////////////////////
//	init
event OnJobInitPointers$( Job job$ )
{
	m_Job$		= job$;
	m_Go$		= job$.Go;
	m_Mind$		= job$.Go.Mind;
	m_Body$		= job$.Go.Body;
	m_Weapon$	= job$.GoalModifier.Go;
}


event OnJobInit$( Job job$ )
{
	OnJobInitPointers$( job$ );

	if( m_Weapon$ == NULL )
	{
		m_Weapon$ = m_Go$;
	}

	m_Target$ = job$.GoalObject;

	if( m_Target$.Go == NULL )
	{
		SetState Exiting$;
	}
	else if( m_Target$.Go.IsActor && !IsAlive( m_Target$.Go.Aspect.LifeState ) )
	{
		SetState Exiting$;
	}
	else
	{
		ResetPathFindingParameters$();
    	
 		// Account distance that the weapon can extend the attacker's space
		m_RangeToTarget$ = m_Go$.mind.PersonalSpaceRange;
		if( m_Weapon$ == m_Go$)
		{
			m_RangeToTarget$ += m_Go$.Attack.AttackRange;
			//report.genericf( "m_Go$.Attack.AttackRange: %f\n",m_Go$.Attack.AttackRange);
		
		} else {
			m_RangeToTarget$ += m_Mind$.WeaponRange;
			//report.genericf( "m_Mind$.WeaponRange: %f\n",m_Mind$.WeaponRange);
		}
    	//report.genericf( "m_Go$.mind.PersonalSpaceRange: %f\n",m_Go$.mind.PersonalSpaceRange);
		
    	//report.genericf( "m_RangeToTarget: %f\n",m_RangeToTarget$);
			
		// Account for target's space
		if m_Target$.go.HasMind()
		{
			 m_RangeToTarget$ += m_Target$.go.mind.PersonalSpaceRange;
		}
		else
		{
			 m_RangeToTarget$ += m_Target$.go.aspect.BoundingSphereRadius;
		}
    	//report.genericf( "m_RangeToTarget2: %f\n",m_RangeToTarget$);
		
		// $$$ Mike: can we get by without tweaking by some constant amount here? -bk
    	
		m_RangeToTarget$ *= 0.9;	// Shrink the engage range just slightly
									// too many paths are failing 
    	//report.genericf( "m_RangeToTarget3: %f\n",m_RangeToTarget$);
		
		m_Effect_ID$ = 0;
    	
		SetState( RequestAction$ );
	}
}


////////////////////////////////////////////////////////////////////////////////
//	global message handler
event OnWorldMessage$( eWorldEvent e$, WorldMessage msg$ )
{
	if( ( e$ == WE_REQ_JOB_FINISH ) ||
		( e$ == WE_ENGAGED_INVALID ) ||
		( e$ == WE_ENGAGED_KILLED ) ||
		( e$ == WE_ENGAGED_HIT_KILLED ) )
	{
		SetState CleaningUpAndExiting$;
	}
	else if( e$ == WE_ANIM_WEAPON_SWUNG )
	{
		if( (msg$.Data1 == 0) && m_Weapon$.IsMeleeWeapon )
		{
			// Get the PROPER sfx from the weapon template
			string effect_script$ = "weapon_tracer";

			// Start the visual effect
			m_Effect_ID$ = SiegeFx.RunScript( effect_script$, m_Weapon$.goid, m_Go$.Goid, "", m_Weapon$.Goid, e$ );
		}
		else if (m_Effect_ID$)
		{
			SiegeFx.FinishScript( m_Effect_ID$ );
			m_Effect_ID$ = 0;
		}
	}
	else if ( e$ == WE_DESTRUCTED )
	{
		SetState Exiting$;
	}
}


state RequestAction$
{

	transition
	{
		-> TargetMoved$:					OnWorldMessage( WE_MCP_DEPENDANCY_BROKEN );
		-> HeadToHead$:						OnWorldMessage( WE_MCP_MUTUAL_DEPENDANCY );
		-> RequestAction$:					OnWorldMessage( WE_JOB_TIMER_DONE );
		-> CleaningUpAndExiting$:			OnWorldMessage( WE_MCP_INVALIDATED );
		-> DamagingAndFollowingThrough$:	OnWorldMessage( WE_ANIM_WEAPON_FIRE );
		-> Error_FireNotFound$:				OnWorldMessage( WE_ANIM_DONE );
	}

	event OnEnterState$
	{
		report.reportf("aiskrit","%s:ATTACK TARGET\n",m_Go$.TemplateName);

		////////////////////////////////////////
		//	check standing orders
		bool continue$ = true;

		if( m_Mind$.MovementOrders == MO_HOLD )
		{
			//report.genericf( "m_RangeToTarget3: %f\n",m_RangeToTarget$);
			float holdRange$ = m_RangeToTarget$ * 1.35;
			//report.genericf( "range: %f\n",holdRange$);
			
			if( !AIQuery.IsInRange( m_Go$.Placement.Position, m_Target$.Go.Placement.Position, holdRange$ ) )
			{
				report.genericf( "Not within %2.2f, distance = %2.2f!\n", holdRange$, AIQuery.GetDistance( m_Go$.Placement.Position, m_Target$.Go.Placement.Position ) );

				// If we are something that switchs to melee lets bail since we have a backup attack.
				if( m_Mind$.OnEnemyEnteredICZSwitchToMelee )
				{
					SetState Exiting$;
				}

				m_Job$.SetTimer( m_Mind$.SensorScanPeriod );

				/* wart -- Need a better way to ensure that we aren't running on the spot

				// $$ Don't make a fidget request twice!
				// May want to play a specific fidget animation
				eAnimStance stance$ = m_Go$.inventory.animstance;
				int subanim$ = m_Go$.Aspect.AspectHandle.NumSubAnimsForChoreAndStance(CHORE_FIDGET,stance$);
				subanim$ = Math.RandomInt(0, Math.MaxInt( 0, subanim$-1 ) ) ;
				MCPManager.MakeRequest( m_Job$.Id, m_Go$.Goid, PL_FIDGET, subanim$);
				*/

 				 continue$ = false;
			}
		}
		else
		{
	  		m_Job$.ClearTimer();
		}

		if( continue$ )
		{
			////////////////////////////////////////
			//	start an attack iteration
	
			// Pick a Random animation to be used
			eAnimStance stance$ = m_Go$.inventory.animstance;
			int subanim$ = m_Go$.Aspect.AspectHandle.NumSubAnimsForChoreAndStance(CHORE_ATTACK,stance$);
			subanim$ = Math.RandomInt( 0, Math.MaxInt( 0, subanim$-2 ) );
	
			// Need to make the length of the attack loop a tunable parameter
	
			// Adding the Reload delay to the attack loop duration will keep the
			// attacker from coming to a standstill. It also removes the need for a 
			// timer state. Once we see an ANIM_DONE, we know we have delayed for the 
			// correct amount of time.
	
			float attack_loop_duration$ = m_Weapon$.Attack.ReloadDelay;
			attack_loop_duration$ += m_Go$.Aspect.AspectHandle.GetBaseDurationForChoreStance(CHORE_ATTACK,stance$);
			eReqRetCode ret$;
	
			if( m_Mind$.MovementOrders == MO_HOLD )
			{
				ret$ = MCPManager.MakeRequest(m_Job$.Id,
												   	m_Go$.Goid,
												   	PL_ATTACK_OBJECT_MELEE,
												   	attack_loop_duration$,
												   	subanim$,
												   	m_Target$,
													m_LookAhead$, 0,
												   	m_RangeToTarget$,
												   	REQFLAG_NOMOVE);
			} else {
				ret$ = MCPManager.MakeRequest(m_Job$.Id,
												   	m_Go$.Goid,
												   	PL_ATTACK_OBJECT_MELEE,
												   	attack_loop_duration$,
												   	subanim$,
												   	m_Target$,
													m_LookAhead$, m_MaxApproachTime$,
												   	m_RangeToTarget$);
			}
			report.ReportF("aimove","[%s] PL_ATTACK_OBJECT_MELEE [%s] returned [%s]\n",
			 	m_Go$.TemplateName,
			 	m_Target$.go.TemplateName,
				ToString(ret$) );
	
			if( RequestFailed(ret$) )
			{
				SetState( Exiting$ );
			}
			else if (ret$ == REQUEST_OK_BEYOND_RANGE)
			{
				SetState( MovingCloser$ );
			}
			else if (ret$ == REQUEST_OK)
			{
			}
			else // (ret$ == REQUEST_OK_IN_RANGE)
			{
				SetState( ContinueAction$ );
			}				
		}
	}
}

state ContinueAction$
{
	// We arrive at this state after we receive a 'WE_MCP_MUTUAL_DEPENDANCY' message
	// or if the characters is within range and we want to ignore any WE_MCP_MUTUAL_DEPENDANCY

	transition
	{
		-> TargetMoved$:					OnWorldMessage( WE_MCP_DEPENDANCY_BROKEN );
		-> CleaningUpAndExiting$:			OnWorldMessage( WE_MCP_INVALIDATED );
		-> DamagingAndFollowingThrough$:	OnWorldMessage( WE_ANIM_WEAPON_FIRE );
		-> Error_FireNotFound$:				OnWorldMessage( WE_ANIM_DONE );
	}
}


state DamagingAndFollowingThrough$
{
	transition
	{
		-> CleaningUpAndExiting$:			OnWorldMessage( WE_MCP_INVALIDATED );
		-> DamagingAndFollowingThrough$:	OnWorldMessage( WE_ANIM_WEAPON_FIRE );
		-> RequestAction$:				   	OnWorldMessage( WE_ANIM_DONE );
		-> CleaningUpAndExiting$:			OnWorldMessage( WE_ENGAGED_HIT_KILLED );
	}

	event OnEnterState$
	{
		report.reportf("aiskrit","%s:DAMAGE AND FOLLOW THROUGH!\n",m_Go$.TemplateName);
		m_Mind$.RequestProcessHitEngaged();
	}
}


state Error_FireNotFound$
{
	transition
	{
		-> CleaningUpAndExiting$:			OnWorldMessage( WE_MCP_INVALIDATED );
		-> RequestAction$:					OnWorldMessage( WE_JOB_TIMER_DONE );
	}

	event OnEnterState$
	{
		report.reportf("aiskrit","%s:NO FIRE FOUND!\n",m_Go$.TemplateName);
		m_Mind$.RequestProcessHitEngaged();
		m_Job$.SetTimer( m_Weapon$.Attack.ReloadDelay );
	}

}


state CleaningUpAndExiting$
{
	transition
	{
		-> Exiting$:						OnWorldMessage( WE_ANIM_DONE );
	}
	event OnEnterState$
	{
		// Let an attack animation finish its follow through
		report.reportf("aiskrit","%s:CLEANING UP!\n",m_Go$.TemplateName);

		if (m_Go$.Aspect.AspectHandle.CurrentChore != CHORE_ATTACK)
		{
			SetState(Exiting$);
		} 
	}

}


state Exiting$
{
	event OnEnterState$
	{
		report.reportf("aiskrit","%s:EXIT ATTACK!\n",m_Go$.TemplateName);
		m_Job$.MarkForDeletion( true );
	}
}
