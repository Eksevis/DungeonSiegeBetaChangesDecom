/*
  ============================================================================
  ----------------------------------------------------------------------------

	File		: 	job_move.skrit

	Author(s)	: 	Bartosz Kijanka

	Purpose		: 	Walk an actor over to a position.


	(C)opyright 2000 Gas Powered Games, Inc.

  ----------------------------------------------------------------------------
  ============================================================================
*/


Go		m_Go$;
GoMind	m_Mind$;
GoBody  m_Body$;
Job		m_Job$;


startup state Startup$
{
}


////////////////////////////////////////////////////////////////////////////////
//	init
event OnJobInitPointers$( Job job$ )
{
	m_Job$		= job$;
	m_Go$		= job$.GetGo;
	m_Mind$		= job$.GetGo.GetMind;
	m_Body$		= job$.GetGo.GetBody;
}


event OnJobInit$( Job job$ )
{
	OnJobInitPointers$( job$ );

	SetState Approaching$;
}



state Approaching$
{
	event OnEnterState$
	{
	   eReqRetCode ret$ = MCPManager.MakeRequest( m_Job$.Id, m_Go$.Goid, PL_APPROACH, m_Job$.GoalPosition, 0 );

		report.ReportF("aimove","[%s] MOVE (PL_APPROACH) [%s] returned [%s]\n",
			m_Go$.TemplateName,
			 MakeSiegePosString(m_Job$.GoalPosition),
			 ToString(ret$) );

  		if (ret$ == REQUEST_OK_IN_RANGE)
		{
			SetState( Arrived$ );
		}
		else if (RequestFailed(ret$))
		{
			SetState( Failed$ );
		}
		else 
		{
			SetState( Walking$ );
		}
		
	}
}

state Walking$
{
	transition
	{
		// We are switching to the fidget that is automatic upon arrival
		-> Arrived$:	OnWorldMessage( WE_MCP_SECTION_COMPLETED );
		-> Arrived$:    OnWorldMessage( WE_ANIM_DONE );
		-> Arrived$:	OnWorldMessage( WE_REQ_JOB_FINISH );
	}
}

state Failed$
{
	event OnEnterState$
	{		
		if (m_Job$.GoalOrientation.IsValid)
		{
			SiegeRot orient$ = SiegeRot.MakeDefault();
			orient$.rot = m_Job$.GoalOrientation;
			orient$.node = m_Job$.GoalPosition.node;
			eReqRetCode ret$ = MCPManager.MakeRequest( m_Job$.Id, m_Go$.Goid, PL_FACE, orient$ );
		}
		if ( m_Go$.IsScreenPartyMember() && m_Job$.GetOrigin() == JO_USER )
		{
			// If this is a player's party member, let them know it is an invalid path.
			m_Go$.PlayVoiceSound( "order_cant_move", false );
		}
		m_Job$.MarkForDeletion( false );
	}
}


state Arrived$
{
	event OnEnterState$
	{
		if (m_Job$.GoalOrientation.IsValid)
		{
			SiegeRot orient$ = SiegeRot.MakeDefault();
			orient$.rot = m_Job$.GoalOrientation;
			orient$.node = m_Job$.GoalPosition.node;
			eReqRetCode ret$ = MCPManager.MakeRequest( m_Job$.Id, m_Go$.Goid, PL_FACE, orient$ );
		}
		m_Job$.MarkForDeletion( true );
	}
}


