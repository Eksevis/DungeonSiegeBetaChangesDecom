/*
  ============================================================================
  ----------------------------------------------------------------------------

	File		: 	job_startup_reveal.skrit

	Author(s)	: 	Eric Tams

	Purpose		:	Generic revealing start-up job

	(C)opyright 2001 Gas Powered Games, Inc.


	Exptected Behavior:
	-------------------

		This job will revel the character then exit
  ----------------------------------------------------------------------------
  ============================================================================
*/


Go		m_Go$;
GoMind	m_Mind$;
Job		m_Job$;


startup state STARTUP$
{
}


////////////////////////////////////////////////////////////////////////////////
//	init

event OnJobInitPointers$( Job job$ )
{
	m_Job$		= job$;
	m_Go$		= job$.Go;
	m_Mind$		= job$.Go.Mind;
}


event OnJobInit$( Job job$ )
{
	OnJobInitPointers$( job$ );

	SetState Start$;
}

////////////////////////////////////////////////////////////////////////////////
//	helper functions

////////////////////////////////////////
//	TryAnim

bool TryAnim$( int FourCC$ )
{
	int Anim$ = m_Go$.Aspect.AspectHandle.GetSubAnimForChoreFourCC(CHORE_MISC,FourCC$);
		
	if (Anim$ >= 0)
	{
		eReqRetCode ret$ = MCPManager.MakeRequest( m_Job$.Id, m_Go$.Goid, PL_PLAYANIM, CHORE_MISC, Anim$, 0 );
		return true;	
	}
	return false;
}


////////////////////////////////////////////////////////////////////////////////
//	main state machine

////////////////////////////////////////////////////////////////////////////////
//	state Start$
//
//  On entering the start state The brain checks to see if a Sleeping Animation exists.
//  If the character has a sleeping animation it will play it until an enemy is spotted.

state Start$
{
	transition
	{
		-> Start$:		OnWorldMessage( WE_ANIM_DONE );
	}
	
	event OnWorldMessage$( eWorldEvent e$, WorldMessage /*msg$*/ )
	{
		if( e$ == WE_ENEMY_SPOTTED )
		{
			SetState Wakeup$;
		}
	}
	
	event OnEnterState$
	{	
		if ( !TryAnim$('slep') )
		{
			SetState Exiting$;
		}
	}
}

////////////////////////////////////////////////////////////////////////////////
//	state Wakeup$
//
//  When entering this stats the Brain tries to play the wakeup animation.
//  When it is finished auto fidgeting is turned on and the brain enters the main state machine.

state Wakeup$
{
	transition
	{
		-> StartFidget$:		OnWorldMessage( WE_ANIM_DONE );
	}
	event OnEnterState$
	{
		if ( !TryAnim$('wake') )
		{
			SetState StartFidget$;
		}
	}
}

////////////////////////////////////////////////////////////////////////////////
//	state StartFidget$

state StartFidget$
{
	event OnEnterState$
	{
		m_Mind$.SetActorAutoFidgets( true );
		SetState Exiting$;
	}
	
}

////////////////////////////////////////////////////////////////////////////////
//	
state Exiting$
{
	event OnEnterState$
	{
		m_Job$.MarkForDeletion( true );
	}
}
