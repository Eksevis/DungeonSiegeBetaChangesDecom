/*
  ============================================================================
  ----------------------------------------------------------------------------

	File		: job_cast_position.skrit

	Author(s)	: Bartosz Kijanka

	Purpose		: This is a basic cast the darn spell at a position.

	(C)opyright 2001 Gas Powered Games, Inc.

  ----------------------------------------------------------------------------
  ============================================================================
*/



Go		m_Go$;
GoMind	m_Mind$;
GoBody  m_Body$;
Job		m_Job$;
Goid	m_Spell$;
int		m_Anim$;

startup state STARTUP$
{
}


////////////////////////////////////////////////////////////////////////////////
//	init
event OnJobInitPointers$( Job job$ )
{
	m_Job$		= job$;
	m_Go$		= job$.GetGo;
	m_Mind$		= job$.GetGo.GetMind;
	m_Body$		= job$.GetGo.GetBody;
}


event OnJobInit$( Job job$ )
{
	OnJobInitPointers$( job$ );

	m_Spell$ 	= job$.GoalModifier;
	m_Anim$		= job$.GoalModifier.Go.Magic.CastSubAnimation;

	SetState( Approaching$ );
}


////////////////////////////////////////////////////////////////////////////////
//	
state Approaching$
{

	event OnEnterState$
	{
		if( m_Spell$.Go.Magic.EvaluateManaCost( m_Go$.Goid, Goid.InvalidGoid ) <= m_Go$.Aspect.CurrentMana )
		{
			eAnimStance stance$ = m_Go$.inventory.animstance;
	 		float cast_loop_duration$ = m_Spell$.Go.Magic.CastReloadDelay;
			cast_loop_duration$ += m_Go$.Aspect.AspectHandle.GetBaseDurationForChoreStance(CHORE_MAGIC,stance$);

			int num_anims$ = m_Go$.Aspect.AspectHandle.NumSubAnimsForChoreAndStance(CHORE_MAGIC,stance$);
					
			if( num_anims$ < m_Anim$ )
			{
				m_Anim$ = 0;
			}

			eReqRetCode ret$ = MCPManager.MakeRequest( m_Job$.Id,
													m_Go$.Goid,
													PL_CAST_ON_POSITION,
													cast_loop_duration$,
													m_Anim$,
													m_Job$.GoalPosition,
													m_Spell$.Go.Magic.CastRange
													);

			report.ReportF("aimove","[%s] PL_CAST_ON_POSITION [%s] returned [%s]\n",
			 	m_Go$.TemplateName,
				MakeSiegePosString(m_Job$.GoalPosition),
				ToString(ret$) );

			if (RequestFailed(ret$))
			{
				SetState( Exiting$ );
			}
			else 
			{
				SetState( Gesturing$ );
			}
		}
		else
		{
			 SetState( Exiting$ );
		}
	}
}


////////////////////////////////////////////////////////////////////////////////
//	
state Gesturing$
{

	transition
	{
		-> Exiting$:				OnWorldMessage( WE_MCP_DEPENDANCY_BROKEN );
		-> Exiting$:				OnWorldMessage( WE_MCP_INVALIDATED );
		-> CastWithoutFireEvent$:	OnWorldMessage( WE_ANIM_DONE );
	}

	trigger OnWorldMessage$( WE_ANIM_WEAPON_FIRE )
	{
		m_Spell$.Go.GetMagic.SCast( m_Job$.GoalPosition );
		SetState( FollowThrough$ );
	}

}

////////////////////////////////////////////////////////////////////////////////
//	
state CastWithoutFireEvent$
{
	event OnEnterState$
	{
//		report.warningf("$$$$ The casting anim for [%s] has no FIRE event\n",m_Go$.TemplateName);

		m_Spell$.Go.GetMagic.SCast( m_Job$.GoalPosition );

		SetState( CastAgain$ );
	}
}

////////////////////////////////////////////////////////////////////////////////
//	
state FollowThrough$
{

	transition
	{
		-> CastAgain$:				OnWorldMessage( WE_ANIM_DONE );
	}

}

////////////////////////////////////////////////////////////////////////////////
//	
state CastAgain$
{
	event OnEnterState$
	{
		if( m_Spell$.Go.Magic.IsOneShot || (m_Spell$.Go.Magic.EvaluateManaCost( m_Go$.Goid, Goid.InvalidGoid ) > m_Go$.Aspect.CurrentMana) )
		{
			SetState( Exiting$ );
		}
		else
		{
			SetState( Approaching$ );
		}
	}
}

////////////////////////////////////////////////////////////////////////////////
//	
state Exiting$
{
	event OnEnterState$
	{
		m_Job$.MarkForDeletion( true );
	}
}
