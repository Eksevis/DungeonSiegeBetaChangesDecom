/*
  ============================================================================
  ----------------------------------------------------------------------------

	File		: job_attack_object_melee.skrit

	Author(s)	: Bartosz Kijanka, biddle, Eric Tams

	Purpose		: This is a basic, walk-over-to-the-guy and beat him with a
				  club/sword/bare hands job.

	(C)opyright 2000 Gas Powered Games, Inc.

  ----------------------------------------------------------------------------
  ============================================================================
*/


property	float	cautious_chance$					= 0.00					doc = "chance to cautiously approach.";
property	float	min_cautious_distance$				= 6.00					doc = "Minimum distance from the enemy for a cautious approach.";
property	float	cautious_approach_distance$			= 1.50					doc = "distance to approach target.";
property	float	cautious_down_time$					= 2.00					doc = "Time spent waiting to approach target.";
property 	bool	abort_cautious_on_damage$			= true					doc = "Abort cautious move on taking damage.";

property	float	run_chance$							= 0.0					doc = "chance for this monster to run?.";

property	float	persistence$						= 1.0					doc = "chance that this monster will continue to try to attack even if the target is beyond range.";

property	float	teleport_chance$					= 0.00					doc = "chance to teleport.";
property	float	teleport_speed$						= 100.0					doc = "Speed that a teleporting monster moves at.";
property	float	min_teleport_distance$				= 4.00					doc = "minimum distance before the monster will teleport.";
property	string	teleport_effect$					= "teleport"			doc = "effect to play when teleporting.";

property	bool	no_turn$							= false					doc = "Don't allow this actor to turn";
property	bool	hit_multiple$						= false					doc = "attack multiple enemies in the attack range instead of just one.";
property	bool	face_reverse$						= false					doc = "face reverse when attacking.";

Go		m_Go$;
GoMind	m_Mind$;
GoBody  m_Body$;
Job		m_Job$;
Go		m_Weapon$;

float	m_RangeToTarget$;
Goid	m_Target$;

float	m_OrigSpeed$ = 0.0;
bool	charging$	 		= false;
bool	teleporting$	 	= false;
bool	cautious_attack$	= false;

////////////////////////////////////////////////////////////////////////////////

#include "k_job_c_mcp_attack_utils"
#include "k_job_c_mcp_fidget_utils"

void TeleportSpeed$()
{	
	m_Go$.Body.SetAvgMoveVelocity( teleport_speed$ );
}

void RunSpeed$()
{	
	m_Go$.Body.SetAvgMoveVelocity( m_Go$.Body.MaxMoveVelocity );
}

void ResetSpeed$()
{
	if( m_OrigSpeed$ > 0.0 )
	{
		m_Go$.Body.SetAvgMoveVelocity( m_OrigSpeed$ );
	}
}

////////////////////////////////////////
// AttackMultiple

void AttackMultiple$()
{
	m_Mind$.TempGopColl1.Clear;
	m_Mind$.GetEnemiesInSphere( m_RangeToTarget$, m_Mind$.TempGopColl1 );
	
	int i$ = 0;
	Go temp$;
	Goid HitWeapon$;
	while( i$ < m_Mind$.TempGopColl1.Size() )
	{
		temp$ = m_Mind$.TempGopColl1.Get( i$ );
		HitWeapon$ = Goid.InvalidGoid;
			
		if ( temp$.HasInventory ) {	
			Go temp_weapon$ = temp$.Inventory.SelectedWeapon;
			if( temp_weapon$ != NULL )
			{
				HitWeapon$ = temp$.Inventory.SelectedWeapon.goid;
			}
		}
		
		if (!HitWeapon$.IsValid) {
			HitWeapon$ = temp$.goid;
		}
		
		if( Rules.CanHit( m_Go$.goid, temp$.goid, m_Weapon$.goid, HitWeapon$ ) )
		{
			Rules.DamageGoMelee( m_Go$.goid, m_Weapon$.goid, temp$.goid );
//			report.generic("hit.\n");
		} else {
//			report.generic("miss.\n");
		}
        i$ += 1;
    }
}

////////////////////////////////////////////////////////////////////////////////

startup state STARTUP$
{
}

////////////////////////////////////////////////////////////////////////////////
//	init
event OnJobInitPointers$( Job job$ )
{
	m_Job$			= job$;
	m_Go$			= job$.Go;
	m_Mind$			= job$.Go.Mind;
	m_Body$			= job$.Go.Body;
	m_Weapon$		= job$.GoalModifier.Go;
}


event OnJobInit$( Job job$ )
{
	OnJobInitPointers$( job$ );

	m_OrigSpeed$	= m_Go$.Body.AvgMoveVelocity;

	if( m_Weapon$ == NULL )
	{
		m_Weapon$ = m_Go$;
	}

	m_Target$ = job$.GoalObject;

	if( m_Go$.Inventory.IsPackOnly && ( job$.GetOrigin == AO_HUMAN ) )
	{
		SetState Exiting$;
	} 
	else if( m_Target$.Go == NULL )
	{
		SetState Exiting$;
	}
	else if( m_Target$.Go.IsActor && !IsAlive( m_Target$.Go.Aspect.LifeState ) )
	{
		SetState Exiting$;
	}
	else
	{
		ResetPathFindingParameters$();

 		// Account distance that the weapon can extend the attacker's space

		m_RangeToTarget$ = m_Go$.mind.PersonalSpaceRange + m_Weapon$.Attack.AttackRange;
		m_RangeToTarget$ += m_Target$.go.HasMind() ? m_Target$.go.mind.PersonalSpaceRange : m_Target$.go.aspect.BoundingSphereRadius;
		// $$$ Mike - is this a 2D range I'm specifying?

		if( run_chance$ > Math.RandomFloat(1) )
		{
			charging$ = true;
			RunSpeed$();
		}
		
		SetState( RequestAction$ );
	}
}


////////////////////////////////////////////////////////////////////////////////
//	global message handling

trigger OnWorldMessage$( WE_MCP_INVALIDATED    ) { SetState CleaningUpAndExiting$; }
trigger OnWorldMessage$( WE_MCP_NODE_BLOCKED   ) { SetState PathBlockedExiting$; }
trigger OnWorldMessage$( WE_REQ_JOB_END        ) { SetState CleaningUpAndExiting$; }
trigger OnWorldMessage$( WE_ENGAGED_INVALID    ) { SetState CleaningUpAndExiting$; }
trigger OnWorldMessage$( WE_ENGAGED_KILLED     ) { SetState CleaningUpAndExiting$; }
trigger OnWorldMessage$( WE_ENGAGED_HIT_KILLED ) { SetState CleaningUpAndExiting$; }
trigger OnWorldMessage$( WE_DESTRUCTED         ) { SetState Exiting$;              }
trigger OnWorldMessage$( WE_DAMAGED )
{
	if( abort_cautious_on_damage$ )
	{
		cautious_chance$ = 0.0;
	}
}


////////////////////////////////////////////////////////////////////////////////
//	
state RequestAction$
{

	transition
	{
		-> TargetMoved$:					OnWorldMessage( WE_MCP_DEPENDANCY_BROKEN );
		-> HeadToHead$:						OnWorldMessage( WE_MCP_MUTUAL_DEPENDANCY );
		-> RequestAction$:					OnWorldMessage( WE_JOB_TIMER_DONE );
		-> DamagingAndFollowingThrough$:	OnWorldMessage( WE_ANIM_WEAPON_FIRE );
		-> Error_FireNotFound$:				OnWorldMessage( WE_ANIM_DONE );
	}

	event OnEnterState$
	{
		if( cautious_attack$ )
		{
			cautious_attack$ = false;
			SetState DownTime$;
			return;
		} 
		
		report.reportf("aiskrit","%s:ATTACK TARGET\n",m_Go$.TemplateName);

		////////////////////////////////////////
		//	check standing orders

		if( m_Mind$.MovementOrders == MO_HOLD && !m_Job$.IsUserAssigned )
		{
			report.reportf( "aiskrit", "m_RangeToTarget3: %f\n",m_RangeToTarget$ );
			float holdRange$ = m_RangeToTarget$ * 1.35;
			report.reportf( "aiskrit", "range: %f\n",holdRange$ );

			// $$$ this is perhaps best done by the brain... move out soldier... -bk
			if( !AIQuery.IsInRange( m_Go$.Placement.Position, m_Target$.Go.Placement.Position, holdRange$ ) )
			{
				report.reportf( "aiskrit", "Not within %2.2f, distance = %2.2f!\n", holdRange$, AIQuery.GetDistance( m_Go$.Placement.Position, m_Target$.Go.Placement.Position ) );

				// 	If we are something that switches to melee lets bail since we have a backup attack; allow them to rerun 0
				//	the generic attack, which perhaps will have them switch to a ranged attack...

				if( m_Mind$.OnEnemyEnteredICZSwitchToMelee && ( m_Mind$.ActorAutoSwitchesToRanged() || m_Mind$.MayAutoCastLifeDamagingSpell() ) )
				{
					m_Job$.MarkForDeletion( JR_OK );
					SetState Exiting$;
					return;
				}

				m_Job$.SetTimer( m_Mind$.SensorScanPeriod );
				return;
			}
		}

		////////////////////////////////////////
		//	start an attack iteration

		// Pick a Random animation to be used
		eAnimStance stance$ = m_Go$.inventory.animstance;
		int subanim$ = m_Go$.Aspect.AspectHandle.Blender.GetNumSubAnims(CHORE_ATTACK,stance$);
		subanim$ = Math.RandomInt( 0, Math.MaxInt( 0, subanim$-2 ) );

		// Need to make the length of the attack loop a tunable parameter

		// Adding the Reload delay to the attack loop duration will keep the
		// attacker from coming to a standstill. It also removes the need for a 
		// timer state. Once we see an ANIM_DONE, we know we have delayed for the 
		// correct amount of time.

		float attack_loop_duration$ = m_Weapon$.Attack.ReloadDelay;
		attack_loop_duration$ += m_Go$.Aspect.AspectHandle.Blender.GetBaseDuration(CHORE_ATTACK,stance$);
		eReqRetCode ret$;

		if( m_Mind$.MovementOrders == MO_HOLD && !m_Job$.IsUserAssigned )
		{
			eReqFlag reqFlags$ = ( no_turn$ ) ? REQFLAG_NOMOVETURN : REQFLAG_NOMOVE;
			
			ret$ = MCPManager.MakeRequest(
										   	m_Go$.Goid,
										   	PL_ATTACK_OBJECT_MELEE,
										   	attack_loop_duration$,
										   	subanim$,
										   	m_Target$,
											m_LookAhead$,
											0,
										   	m_RangeToTarget$,
										   	REQFLAG_NOMOVE );
		}
		else
		{
			if( ( teleport_chance$ > Math.RandomFloat(1) ) && ( min_teleport_distance$ < m_Mind$.GetDistance( m_Target$.Go ) ) )
			{
				TeleportSpeed$();
				Siegefx.SRunScript(teleport_effect$,m_Go$.goid,m_Go$.goid,"",m_Go$.goid, WE_ENTERED_WORLD );
				teleporting$ = true;
			}
			
			if( ( cautious_chance$ > Math.RandomFloat(1) ) && ( min_cautious_distance$ < m_Mind$.GetDistance( m_Target$.Go ) ) )
			{
				// $ need to approach the targets position, not the target. don't want any head to head messages since we aren't going to attack yet. -ET
				
				ret$ = MCPManager.MakeRequest( 
										m_Go$.Goid, 
										PL_APPROACH, 
										m_Target$.Go.Placement.Position, 
										m_Mind$.GetDistance( m_Target$.Go ) - cautious_approach_distance$ );

				cautious_attack$ = true;
				m_Job$.SetTimer( m_Mind$.SensorScanPeriod );						   	
			} else {
				eReqFlag reqFlags$ = ( face_reverse$ ) ? REQFLAG_FACEREVERSE : REQFLAG_DEFAULT;
				
//				MCPManager.MakeRequest( 
//													m_Go$.Goid, 
//													PL_FACE, 
//													m_Target$, 
//													REQFLAG_FACEREVERSE );
				
				ret$ = MCPManager.MakeRequest(
										   	m_Go$.Goid,
										   	PL_ATTACK_OBJECT_MELEE,
										   	attack_loop_duration$,
										   	subanim$,
										   	m_Target$,
											m_LookAhead$, 
											m_MaxApproachTime$,
										   	m_RangeToTarget$,
										   	reqFlags$);
			}
			
			if( teleporting$ )
			{
				teleporting$ = false;
				ResetSpeed$();
			}
		}

		report.reportf( "aimove","[%s] PL_ATTACK_OBJECT_MELEE [%s] returned [%s]\n", m_Go$.TemplateName, m_Target$.go.TemplateName, ToString(ret$) );

		if( RequestFailed(ret$) )
		{
			if (ret$ == REQUEST_FAILED_OVERCROWDED)
			{
				m_Job$.MarkForDeletion( JR_OK );
			}
			else
			{
				m_Job$.MarkForDeletion( JR_FAILED_NO_PATH );
			}
			SetState( Exiting$ );
		}
		else if (ret$ == REQUEST_OK_BEYOND_RANGE)
		{
			if( ( persistence$ < Math.RandomFloat(1) ) && ( m_Go$.Player.Controller == PC_COMPUTER ) )
			{
				report.reportf( "aiskrit", "%s: giving up melee attack to find a new target.\n",m_Go$.TemplateName );
				m_Job$.MarkForDeletion( JR_OK );
			}
			else if ( !cautious_attack$ )
			{
				SetState( MovingCloser$ );	
			}
		}
		else // ret$ == OK
		{
			report.reportf( "aiskrit", "%s: within melee range of %s [%s]\n",m_Go$.TemplateName, m_Target$.go.TemplateName, ToString(ret$) );
   			// SetState( ContinueAction$ ); -- Don't treat in range as anything special... -biddle
		}
	}
}

state DownTime$
{
	event OnEnterState$
	{
		StartFidgetIfRequired$();
		This.CreateTimer(1, cautious_down_time$);
	}
	
	Trigger OnWorldMessage$( WE_ANIM_DONE )
	{
		StartFidgetIfRequired$();
	}
	
	transition
	{
		-> RequestAction$:					OnTimer( 1 );
		-> RequestAction$:					OnWorldMessage( WE_DAMAGED );
		-> RequestAction$:					OnWorldMessage( WE_MCP_MUTUAL_DEPENDANCY );
	}
}

state ContinueAction$
{
	// We arrive at this state after we receive a 'WE_MCP_MUTUAL_DEPENDANCY' message
	// or if the characters is within range and we want to ignore any WE_MCP_MUTUAL_DEPENDANCY

	transition
	{
		-> TargetMoved$:					OnWorldMessage( WE_MCP_DEPENDANCY_BROKEN );
		-> DamagingAndFollowingThrough$:	OnWorldMessage( WE_ANIM_WEAPON_FIRE );
		-> Error_FireNotFound$:				OnWorldMessage( WE_ANIM_DONE );
	}
	
	event OnEnterState$
	{
		cautious_attack$ = false;
	}		
}


state DamagingAndFollowingThrough$
{
	transition
	{
		-> DamagingAndFollowingThrough$:	OnWorldMessage( WE_ANIM_WEAPON_FIRE );
		-> RequestAction$:				   	OnWorldMessage( WE_ANIM_DONE );
		-> CleaningUpAndExiting$:			OnWorldMessage( WE_ENGAGED_HIT_KILLED );
	}

	event OnEnterState$
	{
		cautious_attack$ = false;
		if( charging$ )
		{
			ResetSpeed$();
			charging$ = false;
		}
		report.reportf("aiskrit","%s:DAMAGE AND FOLLOW THROUGH!\n",m_Go$.TemplateName);
		if( hit_multiple$ )
		{
			AttackMultiple$();
		}
		else
		{
			m_Mind$.RequestProcessHitEngaged();
		}
	}
}


state Error_FireNotFound$
{
	transition
	{
		-> RequestAction$:					OnWorldMessage( WE_JOB_TIMER_DONE );
	}

	event OnEnterState$
	{
		report.reportf("aiskrit","%s:NO FIRE FOUND!\n",m_Go$.TemplateName);
		
		if( hit_multiple$ )
		{
			AttackMultiple$();
		}
		else
		{
			m_Mind$.RequestProcessHitEngaged();
		}
		
		m_Job$.SetTimer( m_Weapon$.Attack.ReloadDelay );
	}

}


state CleaningUpAndExiting$
{
	transition
	{
		-> Exiting$:						OnWorldMessage( WE_ANIM_DONE );
	}
	event OnEnterState$
	{
		// Let an attack animation finish its follow through
		report.reportf("aiskrit","%s:CLEANING UP!\n",m_Go$.TemplateName);

		if ( m_Go$.Aspect.AspectHandle.CurrentChore != CHORE_ATTACK )
		{
			m_Job$.MarkForDeletion( JR_OK );
			SetState(Exiting$);
		} 
	}

}

state PathBlockedExiting$
{
	event OnEnterState$
	{
		if( charging$ )
		{
			ResetSpeed$();									   
			charging$ = false;
		}
		
		report.reportf("aiskrit","%s:EXIT ATTACK, PATH BLOCKED!\n",m_Go$.TemplateName);
		m_Job$.MarkForDeletion(JR_FAILED_NO_PATH);
	}
}

state Exiting$
{
	event OnEnterState$
	{
		if( charging$ )
		{
			ResetSpeed$();									   
			charging$ = false;
		}
		
		report.reportf("aiskrit","%s:EXIT ATTACK!\n",m_Go$.TemplateName);
		m_Job$.MarkForDeletion();
	}
}


															
