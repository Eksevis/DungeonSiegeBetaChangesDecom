/*
  ============================================================================
  ----------------------------------------------------------------------------

	File		: 	job_guard.skrit

	Author(s)	: 	Bartosz Kijanka

	Purpose		: 	Guard another actor, but defend yourself if needed.

	(C)opyright 2001 Gas Powered Games, Inc.

  ----------------------------------------------------------------------------
  ============================================================================
*/


Go		m_Go$;
GoMind	m_Mind$;
GoBody  m_Body$;
Job		m_Job$;
Goid	m_Target$;
float	m_FollowDistance$;
float	m_ApproachDistance$;

////////////////////////////////////////////////////////////////////////////////

#include "k_job_c_path-utils"



////////////////////////////////////////////////////////////////////////////////
//	helper functions

bool TryAttack$( Go target$ )
{
	if( target$ != NULL)
	{
		if( m_Mind$.MayAttack( target$ ) )
		{
			m_Mind$.SDoJob( MakeJobReq( JAT_ATTACK_OBJECT, JQ_ACTION, QP_FRONT, JO_REFLEX, target$.Goid ));
			return true;
		}
	}
	return false;
}


bool TryRespondToAttack$( Go target$ )
{
	if( target$ != NULL)
	{
		if( m_Mind$.MayRespondToAttack( target$ ) )
		{
			//MCPManager.Flush(m_Go$.Goid);
			m_Mind$.SDoJob( MakeJobReq( JAT_ATTACK_OBJECT, JQ_ACTION, QP_FRONT, JO_REFLEX, target$.Goid ));
			return true;
		}
	}
	return false;
}


startup state STARTUP$
{
}


////////////////////////////////////////////////////////////////////////////////
//	init
event OnJobInitPointers$( Job job$ )
{
	m_Job$					= job$;
	m_Go$					= job$.Go;
	m_Mind$					= job$.Go.Mind;
	m_Body$					= job$.Go.Body;
	m_FollowDistance$		= 3.5;
	m_ApproachDistance$		= 2.0;
}


event OnJobInit$( Job job$ )
{
	OnJobInitPointers$( job$ );

	m_Target$	= job$.GoalObject;

	if (m_Target$.IsValid())
	{
		ResetPathFindingParameters$();
		SetState RequestAction$;
	} else {
		SetState Exiting$;
	}
	
}


////////////////////////////////////////////////////////////////////
//	global response to messages for me
event OnWorldMessage$( eWorldEvent e$, WorldMessage msg$ )
{
	if( e$ == WE_ENGAGED_LOST || e$ == WE_ENGAGED_INVALID )
	{
		SetState Exiting$;
	}
	else if( ( e$ == WE_DAMAGED ) || ( e$ == WE_ATTACKED_MELEE ) || ( e$ == WE_ATTACKED_RANGED ) )
	{
		TryRespondToAttack$( MakeGoid( msg$.Data1 ).Go );
	}
	else if( e$ == WE_ENEMY_SPOTTED )
	{
		TryRespondToAttack$( MakeGoid( msg$.Data1 ).Go );
	}
}


////////////////////////////////////////////////////////////////////
//	global response to messages for my guardee
event OnCCWorldMessage$( eWorldEvent e$, WorldMessage msg$ )
{
	if( ( e$ == WE_DAMAGED ) || ( e$ == WE_ATTACKED_MELEE ) || ( e$ == WE_ATTACKED_RANGED ) )
	{
		TryRespondToAttack$( MakeGoid( msg$.Data1 ).Go );
	}
	else if( e$ == WE_KILLED )
	{
		SetState( Exiting$ );
	}
	else if( e$ == WE_LOST_CONSCIOUSNESS )
	{
		SetState( Exiting$ );
	}
}


////////////////////////////////////////////////////////////////////////////////
//	
state RequestAction$
{
	transition
	{
		-> TargetMoved$:	OnWorldMessage( WE_MCP_DEPENDANCY_BROKEN );
		// We are switching to the fidget that is automatic upon arrival
		-> FidgetAgain$:		OnWorldMessage( WE_ANIM_DONE );
	}

	event OnEnterState$
	{
   
   		eReqRetCode ret$ = MCPManager.MakeRequest(
										m_Job$.Id,
										m_Go$.Goid,
										PL_APPROACH, 
										m_Target$,
										m_LookAhead$, m_MaxApproachTime$,
										m_ApproachDistance$ ) ;

		if( RequestFailed(ret$) )
		{
			SetState( Arrived$ );
		}
		else if (ret$ == REQUEST_OK_BEYOND_RANGE)
		{
			SetState( MovingCloser$ );
		}
		else if (ret$ == REQUEST_OK)
		{
		}
		else // (ret$ == REQUEST_OK_IN_RANGE)
		{
				SetState( Arrived$ );
		}
	}
}

////////////////////////////////////////////////////////////////////////////////
//	
state Arrived$
{

	transition

	{
		-> Arrived$:		OnWorldMessage( WE_JOB_TIMER_DONE );
		-> FidgetAgain$:	OnWorldMessage( WE_ANIM_DONE ); 
		-> FidgetAgain$:	OnWorldMessage( WE_MCP_SECTION_COMPLETED ); 
	}

	trigger OnTimer$( 1 )
	{
		SetState RequestAction$;
	}

	event OnEnterState$
	{
		m_Job$.SetTimer( m_Mind$.SensorScanPeriod );

		float dist$ = m_Mind$.GetDistanceAtPlanEnd( m_Target$.Go );
/*
		report.genericf( "from %s job %s scid:0x%08x, to %s job %s scid:0x%08x - distance at plan end = %f\n", 
							m_Go$.TemplateName, 
							( m_Go$.Mind.GetFrontJob( JQ_ACTION ) != NULL ) ? ToString( m_Go$.Mind.GetFrontJob( JQ_ACTION ).JobAbstractType ) : "none",
							m_Go$.Scid,
							m_Target$.Go.TemplateName, 
							( m_Target$.Go.Mind.GetFrontJob( JQ_ACTION ) != NULL ) ? ToString( m_Target$.Go.Mind.GetFrontJob( JQ_ACTION ).JobAbstractType ) : "none",
							m_Target$.Scid,
							dist$ );
*/
		Go client$ = m_Target$.Go;

		if( ( dist$ > m_FollowDistance$ ) && ( m_Mind$.GetDistance( m_Target$.Go ) > m_ApproachDistance$ ) )
		{
			////////////////////////////////////////
			//	try to stay close to client
			this.CreateTimer( 1, .1 );
			//SetState( RequestAction$ );
		}
		else if( client$.Mind.OnEnemySpottedAttack && client$.Mind.EnemiesVisible )
		{
			////////////////////////////////////////
			//	attack client's enemies first
			Go enemy$ = client$.Mind.GetFocusedEnemy();
			TryAttack$( enemy$ );
		}
		else if ( !client$.Mind.IsLifeHigh )
		{
			////////////////////////////////////////
			//	heal client if needed and possible

			Go spellBook$ = m_Go$.Inventory.GetEquipped( ES_SPELLBOOK );
			if( spellBook$ != NULL )
			{
				//report.generic( "trying to heal guardee.\n" );

				////////////////////////////////////////
				//	find the most healing spell this guy can cast
				m_Mind$.TempQtColl1.Clear;
				m_Mind$.TempQtColl1.Add( QT_SPELL );
				m_Mind$.TempQtColl1.Add( QT_CASTABLE );
				m_Mind$.TempQtColl1.Add( QT_LIFE_HEALING );

				m_Mind$.TempGopColl1.Clear;
				spellBook$.Inventory.ListItems( IL_SPELL_1, m_Mind$.TempGopColl1 );
				spellBook$.Inventory.ListItems( IL_SPELL_2, m_Mind$.TempGopColl1 );

				m_Mind$.TempGopColl2.Clear;
				AIQuery.Get( m_Mind$.TempQtColl1, m_Mind$.TempGopColl1, m_Mind$.TempGopColl2 );
				Go spell$ = AIQuery.GetMax( QT_LIFE_HEALING, m_Mind$.TempGopColl2 );

				////////////////////////////////////////
				//	compare spell and log if best one thus far
				if( spell$ != NULL )
				{
					m_Mind$.SDoJob( MakeJobReq( JAT_CAST, JQ_ACTION, QP_FRONT, JO_REFLEX, m_Target$, spell$.Goid ) );
				}
			}
		}
		else if( m_Mind$.OnEnemySpottedAttack && m_Mind$.EnemiesVisible )
		{
			////////////////////////////////////////
			//	attack own enemies last
			Go enemy$ = m_Mind$.GetFocusedEnemy();
			TryAttack$( enemy$ );
		}
		else
		{
		}
	}
}

////////////////////////////////////////////////////////////////////////////////
//	
state FidgetAgain$
{
	event OnEnterState$
	{
		eAnimStance stance$ = m_Go$.inventory.animstance;
		int subanim$ = m_Go$.Aspect.AspectHandle.NumSubAnimsForChoreAndStance(CHORE_FIDGET,stance$);
		subanim$ = Math.RandomInt(0, Math.MaxInt( 0, subanim$-1 ) ) ;
		MCPManager.MakeRequest( m_Job$.Id, m_Go$.Goid, PL_FIDGET, subanim$);
		SetState Arrived$;
	}
}

////////////////////////////////////////////////////////////////////////////////
//	
state Exiting$
{
	event OnEnterState$
	{
		m_Job$.MarkForDeletion( true );
	}
}
