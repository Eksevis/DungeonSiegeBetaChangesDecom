/*
  ============================================================================
  ----------------------------------------------------------------------------

	File		: 	job_flee_from_object.skrit

	Author(s)	: 	Bartosz Kijanka

	Purpose		: 	Run away like hell, then give up.

	(C)opyright 2000 Gas Powered Games, Inc.

  ----------------------------------------------------------------------------
  ============================================================================
*/


Go		m_Go$;
GoMind	m_Mind$;
Job		m_Job$;

startup state Startup$
{
}


////////////////////////////////////////////////////////////////////////////////
//	init
event OnJobInitPointers$( Job job$ )
{
	m_Job$		= job$;
	m_Go$		= job$.Go;
	m_Mind$		= job$.Go.GetMind;
}


event OnJobInit$( Job job$ )
{
	OnJobInitPointers$( job$ );

	if( job$.GoalObject.Go == NULL )
	{
		SetState Exiting$;
	}

	SetState RequestAction$;
}


state RequestAction$
{
	event OnEnterState$
	{
		eReqRetCode ret$ = REQUEST_FAILED;

		if( m_Mind$.PickSafeSpotAwayFrom( m_Job$.GoalObject.Go, m_Mind$.FleeDistance, m_Mind$.TempPos1 ) )
		{
			ret$ = MCPManager.MakeRequest( m_Job$.Id, m_Go$.Goid, PL_APPROACH, m_Mind$.TempPos1, 0.1 );
		}
		else if( m_Mind$.PickSafeSpotAwayFrom( m_Job$.GoalObject.Go, m_Mind$.FleeDistance*0.66, m_Mind$.TempPos1 ) )
		{
			ret$ = MCPManager.MakeRequest( m_Job$.Id, m_Go$.Goid, PL_APPROACH, m_Mind$.TempPos1, 0.1 );
		}
		else if( m_Mind$.PickSafeSpotAwayFrom( m_Job$.GoalObject.Go, m_Mind$.FleeDistance*0.33, m_Mind$.TempPos1 ) )
		{
			ret$ = MCPManager.MakeRequest( m_Job$.Id, m_Go$.Goid, PL_APPROACH, m_Mind$.TempPos1, 0.1 );
		}

		if (ret$ == REQUEST_OK_IN_RANGE)
		{
			SetState( Exiting$ );
		}
		else if ( RequestOk(ret$) )
		{
			SetState( WaitingForArrival$ );
		}
		else
		{
			SetState( Exiting$ );
		}
	}
}


state WaitingForArrival$
{
	transition
	{
		// We are switching to the fidget that is automatic upon arrival
		-> Exiting$:	OnWorldMessage( WE_MCP_SECTION_COMPLETED );
		-> Exiting$:   	OnWorldMessage( WE_MCP_SECTION_COMPLETE_WARNING );
	}
}


state Exiting$
{
	event OnEnterState$
	{
		m_Job$.MarkForDeletion( true );
	}
}


