///////////////////////////////////////////////////////////////////////////////
//	combat_constants
//
//	This block contains values/coefficients used in combat related formulas
//	for calculating how much damage to take, whether or not a hit was a success
//	and other stuff of the like.
//

[combat_constants]
{
	//
	// Attack/defend rating coefficients
	//
	// rating = (skill_scalar * skill_level) + (dex_scalar * dex) + (int_scalar * int);

	[attack_rating]	{	skill_scalar = 0.45; dex_scalar = 0.55; int_scalar = 0.15; }
	[defend_rating]	{	skill_scalar = 0.45; dex_scalar = 0.55; int_scalar = 0.15; }

	// Variables related to determing whether or not one go was successfull in
	// landing a hit on a defending go
	hit_chance				=	50.0;
	attacker_diff_scalar	=	2.1;
	victim_diff_scalar		=	2.1;
	attacker_hit_cap		=	95.0;
	defender_hit_cap		=	5.0;

	// Death threshold is used to determine how far below zero character life can
	// go before the character goes from being unconscious to dead
	death_threshold			=	0.33;

	// Radius of sphere check for when a character is unconscious and has healed
	// through natural recovery - if there is an enemy within this sphere then
	// the character will continue to lie on the ground until threat is gone
	enemy_near_sphere		=	8.0;

	// Minimum amount of time that a character will stay unconscious regardless of
	// how close to zero the character is when he went unconscious
	min_unconscious_duration=	5.0;

	// Armor scalar is used for tuning amount of damage that is done with regard
	// to the amount of armor the victim has
	armor_scalar			=	1.0;

	// Aiming error calculation constants for ranged combat
	// error_*((100 - ATan( (dex_*Dexterity + int_*Intelligence + skill_*Skill_level)/14.7 )*63)/100);
	error_scalar	=	4.0;	// +/- amount of error in degrees
	dex_scalar		=	0.35;
	int_scalar		=	0.10;
	skill_scalar	=	0.55;

	// Difficulty level multipliers - damage done from attackers perspective
	difficulty_easy_player	 	=	1.35;
	difficulty_easy_computer  	=	0.5;

	difficulty_medium_player	=	1.0;
	difficulty_medium_computer	=	1.0;

	difficulty_hard_player	 	=	0.85;
	difficulty_hard_computer 	=	1.45;
}

///////////////////////////////////////////////////////////////////////////////
//	physics_constants
//
//	This block contains global values associated with settings for physics
//	objects

[physics_constants]
{
	enemy_attach_life	=	12;
	party_attach_life	=	4;
}

///////////////////////////////////////////////////////////////////////////////
//	recalculation_constants
//
//	Only actors that level up use these recovery rates otherwise there could be
//	a problem where a monsters was knocked unconscious instead of dying

[recalculation_constants]
{
	// If any attribute is greater than 10 then 9 points are subtracted before
	// performing this calculation:
	// max_life = (str * str_percent * constant) + (dex * dex_percent * constant )
	//			+ (int * int_percent * constant ) + max_life_base
	max_life_base			= 24.0;
	max_life_constant		= 11.0;
	max_life_str_percent	= 0.6;
	max_life_dex_percent	= 0.2;
	max_life_int_percent	= 0.2;

	// max_mana = (str-9 * str_percent * constant) + (dex-9 * dex_percent * constant)
	//			+ (int-9 * int_percent * constant) + max_mana_base
	max_mana_base			= 0.0;
	max_mana_constant		= 1.0;
	max_mana_str_percent	= 1.0;
	max_mana_dex_percent	= 4.0;
	max_mana_int_percent	= 25.0;

	// Period before syncronizing mana and life according to the server on all clients
	sync_period				= 3.0;
	sync_random				= 2.0;	// +/- amount to add to sync_period when resetting for a go
}

///////////////////////////////////////////////////////////////////////////////
//	actor_skills
//
//	Defines characteristics of character skills in the game - all skills are
//	based off of the amount of experience the character has received from killing
//	monsters derived from the equation:
//
//	level(a,b,experience_points) = (-b + sqrt( b^2 + 4*a*experience_points )) / (2*a)
//
//	Where: a & b are defined below as coefficient_a and coefficient_b respectively.
//
//	The character itself doesn't have a level but rather has multiple levels split
//	across what is defined within here.
//
//

[actor_skills]
{
	//
	//	Combat skills
	//
	//	Depending on how a monster/actor was attacked the weapon/spell used improves
	//	the combat skills below which also effect the innate skills of the character
	//	by redistributing a specified percentage of the experience attained.
	//

	[skill*]
	{
	name = "Melee";			class = "Fighter";

	str_influence = 0.6;	dex_influence = 0.3;	int_influence = 0.1;
	coefficient_a = 210;		coefficient_b = 90;

	[level_up_indicator*] {	level_range	= 1-5;		script	= melee_up_locked1, bip01; }
	[level_up_indicator*] { level_range	= 6-10;		script	= melee_up_locked2, bip01; }
	[level_up_indicator*] {	level_range	= 11-20;	script	= melee_up_locked3, bip01; }
	[level_up_indicator*] {	level_range	= 21-250;	script	= melee_up_locked4, bip01; }
	}

	[skill*]
	{
	name = "Ranged";		class = "Archer";

	str_influence = 0.3;	dex_influence = 0.6;	int_influence = 0.1;
	coefficient_a = 210;		coefficient_b = 90;

	[level_up_indicator*] { level_range	= 1-5;		script = ranged_up_locked1, bip01; }
	[level_up_indicator*] { level_range	= 6-10;		script = ranged_up_locked2, bip01; }
	[level_up_indicator*] { level_range	= 11-20;	script = ranged_up_locked3, bip01; }
	[level_up_indicator*] { level_range	= 21-250;	script = ranged_up_locked4, bip01; }

	}

	[skill*]
	{
	name = "Nature Magic";	class = "Nature Magic User";

	str_influence = 0.1;	dex_influence = 0.2;	int_influence = 0.7;
	coefficient_a = 210;		coefficient_b = 90;

	[level_up_indicator*] {	level_range	= 1-5;		script = gmagic_up_locked1, bip01; }
	[level_up_indicator*] {	level_range	= 6-10;		script = gmagic_up_locked2, bip01; }
	[level_up_indicator*] {	level_range	= 11-20;	script = gmagic_up_locked3, bip01; }
	[level_up_indicator*] {	level_range	= 21-250;	script = gmagic_up_locked4, bip01; }

	}

	[skill*]
	{
	name = "Combat Magic";	class = "Combat Magic User";

	str_influence = 0.1;	dex_influence = 0.2;	int_influence = 0.7;
	coefficient_a = 210;		coefficient_b = 90;

	[level_up_indicator*] {	level_range	= 1-5;		script = dmagic_up_locked1, bip01; }
	[level_up_indicator*] {	level_range	= 6-10;		script = dmagic_up_locked2, bip01; }
	[level_up_indicator*] {	level_range	= 11-20;	script = dmagic_up_locked3, bip01; }
	[level_up_indicator*] {	level_range	= 21-250;	script = dmagic_up_locked4, bip01; }
	}



	//
	//	Innate skills
	//
	//	Experience is awarded from using a combat skill and influences the skills
	//	here below by the fractional amount defined above. Experience is applied
	//

	[skill*]
	{
	name = "Strength";

	str_influence = 0;		dex_influence = 0;		int_influence = 0;
	coefficient_a = 210;		coefficient_b = 90;
	}

	[skill*]
	{
	name = "Intelligence";

	str_influence = 0;		dex_influence = 0;		int_influence = 0;
	coefficient_a = 210;		coefficient_b = 90;
	}

	[skill*]
	{
	name = "Dexterity";

	str_influence = 0;		dex_influence = 0;		int_influence = 0;
	coefficient_a = 210;		coefficient_b = 90;
	}
}

///////////////////////////////////////////////////////////////////////////////
//	general_formulas
//
//	These formulas are meant for general purpose formula evaluation allowed
//  from skrit.
//
//	The function for a formula must be named the same as the formula name, take
//	no parameters and return the type that the caller is interested in. Other
//	functions can be stored in the skrit (or you can do #include) for utility
//	purposes.
//
//	If you put properties in the formula, then you can set those properties in
//	the caller by using the URL-style formatting. For example:
//
//		float f$ = ContentDb.EvalFloatFormula( "jooky?prop1=10&prop2=yo", 0.0 );
//
//	Note that the second parameter in this function is a default return value.
//	This will be used if there is an error in the function call. This parameter
//	is optional and defaults to 0.0, 0, or false depending on function.

[general_formulas]
{
	skrit =
	[[
		// Recovery rate stuff
		property float str$				= 1.0		doc = "default strength";
		property float int$				= 1.0		doc = "default intelligence";
		property float dex$				= 1.0		doc = "default dexterity";

		property float melee$			= 0 		doc = "default melee skill level";
		property float ranged$			= 0 		doc = "default ranged skill level";
		property float nmagic$			= 0 		doc = "default nature magic skill level";
		property float cmagic$			= 0			doc = "default combat magic skill level";


		property float lr_unit$			= 1.0		doc = "default life_recovery_unit";
		property float lr_period$		= 4.0		doc = "default life_recovery_period";

		property float mr_unit$			= 1.0		doc = "default mana_recovery_unit";
		property float mr_period$		= 3.0		doc = "default mana_recovery_period";

		property float guts_rate_high$	= 0.3		doc = "Number of seconds before spewing guts again, Max ObjectDetailLevel";
		property float guts_rate_low$	= 1.0		doc = "Number of seconds before spewing guts again, Min ObjectDetailLevel";


		bool should_spawn_broken_container$
		{
			// $ yo, this is just test stuff i added, needs tweaking. -sb

			if ( WorldOptions.ObjectDetailLevel >= .9 )
			{
				// lod of .9+ means always show it
				return ( true );
			}
			else if ( WorldOptions.ObjectDetailLevel >= .5 )
			{
				// lod of .5+ means show it 50% of the time
				return ( Math.RandomInt( 1 ) == 1 );
			}

			// below .5 means never show it
			return ( false );
		}

		float time_before_next_guts_spew$
		{
			// $ this formula determines now much time must pass before an actor can play an effect when he is hit again. -ET
			return ( WorldOptions.ObjectDetailLevel * guts_rate_high$ ) + ( (1.0 - WorldOptions.ObjectDetailLevel) * guts_rate_low$ );
		}

		float life_recovery_rate$
		{
			float result$		 = 0;
			float life_recovery$ = (lr_unit$ / lr_period$);

			// Determine what formula to use based on the strength of the actor
			if ( str$ < 10 )
			{
				// The actor is below average strength so use a weak formula
				result$ = (life_recovery$ / 9) * str$;
			}
			else
			{
				// The actor is at or above average strength so use the standard formula
				result$ = (life_recovery$ / 9) * (str$ - 10) + life_recovery$;
			}

			return result$;
		}

		float mana_recovery_rate$
		{
			float result$		 = 0;
			float mana_recovery$ = (mr_unit$ / mr_period$);

			// Determine what formula to used based on the intelligence of the actor
			if ( int$ < 10 )
			{
				// The actor is of below average intelligence so treat him like he is "special."
				result$ = (mana_recovery$ / 1.2) * ( (int$ / 10 ) + mana_recovery$ );
			}
			else
			{
				// If the actor has an intelligence above or equal to 10 then use this formula
				result$ = (mana_recovery$ / 1.2) * (int$ - 10) + mana_recovery$;
			}

   			return result$;
		}
	]];
}

///////////////////////////////////////////////////////////////////////////////
