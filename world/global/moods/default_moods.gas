/*
***************************************************************
//
// Example of all possible settings
//
***************************************************************
*/
/*
[mood_setting*]
{
	// name to reference mood by
	mood_name				= all_possible_settings;

	// The amount of time in seconds that it will take to transition
	// between the old mood setting and the new one.
	transition_time			= 5.0f;

	// The following blocks define specific mood parameters.
	// Omitting a block in your mood definition will cause the system
	// to mark that component as disabled.

	// Sun settings
	[sun]
	{
		// Specification of mood specific timed light color table.
		// Exactly the same as the default table defined in timeofday.gas
		[00h00m]{ color	= 0xFFA4700F; }
		[01h00m]{ color	= 0xFFA4700F; }
		[02h00m]{ color	= 0xFFE0A54B; }

		// etc...
		// There is no limit to the number of time blocks as long as they
		// fit the proper format. (i.e. XXhYYm, where XX is the hour
		// between [0-23] and YY is the minute between [0-59])
	}

	// Frustum settings
	[frustum]
	{
		// Width of the frustum
		frustum_width		= 45.0f;

		// Height of the frustum
		frustum_height		= 1000.0f;
	}

	// Fog settings
	[fog]
	{
		// The start of the fog, in meters from the camera
		fog_near_dist		= 45.0f;

		// The end of the fog, in meters from the camera
		fog_far_dist		= 65.0f;

		// The color of the fog, in 0xAARRGGBB format
		fog_color			= 0xFFFFFFFF;

		// The density of the fog in the range [0.0f - 1.0f]
		fog_density			= 1.0f;
	}

	// Rain settings
	[rain]
	{
		// The density of the rain, which specifies the number of rain drops
		// that will be spawned in one second of game time
		rain_density		= 200;

		// Specifies whether or not lightning will occur with the rain
		lightning			= true;
	}

	// Snow settings
	[snow]
	{
		// The density of the snow, which specifies the number of snow flakes
		// that will be spawned in one second of game time
		snow_density		= 400;
	}

	// Wind settings
	[wind]
	{
		// Velocity of the wind, in meters per second
		wind_velocity		= 2.0f;

		// Direction of the wind, specified in radians angles from the north
		// vector. (i.e.  PI/2 would be east, PI would be south, etc.)
		wind_direction		= 0.0f;
	}

	// Music settings
	[music]
	{
		// Ambient theme
		ambient_track			= "";
		ambient_intro_delay		= 0.0f;
		ambient_repeat_delay	= 0.0f;

		// Standard theme
		standard_track			= s_m_maintheme.mp3;
		standard_intro_delay	= 0.0f;
		standard_repeat_delay	= 0.0f;

		// Battle theme
		battle_track			= s_m_battle.mp3;
		battle_intro_delay		= 0.0f;
		battle_repeat_delay		= 0.0f;
	}
}
*/
