//////////////////////////////////////////////////////////////////////////////
//
// File     :  world\contentdb\pcontent.skrit
// Author(s):  Scott Bilas
//
// Summary  :  Contains a big happy fun pile of formulas for building
//             parameterized content.
//
// Copyright © 2000 Gas Powered Games, Inc.  All rights reserved.
//----------------------------------------------------------------------------
//  $Revision:: $              $Date:$
//----------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////////

// $ note: i am not passing these parameters into the functions (and
//         using properties instead) on purpose. that way, the
//         properties can be reused across steps of pcontent generation,
//         in case the formulas want to base their results on more than
//         just the values they are explicitly passed. the properties
//         noted in each function as "input" are set right before each
//         function call. -sb

// $ note: the incoming type$ is always a "basic" pcontent type, which
//         is either weapon, armor, amulet, or ring.

// $ note: IMPORTANT - always use GoMath for random number generation!
//         this uses a separate, client-server sync'd RNG.

property float         total_power$;
property float         item_power_min$;
property float         item_power_max$;
property float         item_power$;
property Goid          item_goid$;
property ePContentType item_specific_type$;
property string        item_subtype$;
property string        item_material$;
property bool          item_two_handed$;
property bool          item_is_normal$;
property bool          item_is_rare$;
property bool          item_is_unique$;
property float         modifier_count$;
property float         modifier_power$;
property float         modifier_power_0$;
property float         modifier_power_1$;

//////////////////////////////////////////////////////////////////////

float calc_item_power$( ePContentType type$ )
{
	// given a power range, calculate the resulting final single power
	// value to assign to the item.

	// input: item_specific_type$
	// input: item_power_min$
	// input: item_power_max$
	// input: item_subtype$
	// input: item_material$
	// input: item_two_handed$

	float power$ = (item_power_min$ + item_power_max$) / 2;

	if ( type$ == PT_WEAPON )
	{
		power$ = power$ - (power$ * ((((item_power_max$ - item_power_min$) / 2) / power$) / 10));

		if ( item_specific_type$ == PT_RANGED )
		{
			power$ *= 1.0;
		}
         else if ( item_subtype$ ~= "staff" )
		{
			power$ *= 0.924;  // 1.25 to equal other     2.5
		}
		else if ( ( item_subtype$ ~= "axe" ) && (item_two_handed$) )
		{
			power$ *= 0.625;  // 0.52
		}
		else if ( ( item_subtype$ ~= "hammer" ) && (item_two_handed$) )
		{
			power$ *= 0.625;     // 0.52
		}
		else if ( ( item_subtype$ ~= "sword" ) && (item_two_handed$) )
		{
			power$ *= 0.625;
		}
	}
	else if ( type$ == PT_ARMOR )
	{
		if ( item_specific_type$ == PT_SHIELD )
		{
				power$ *= 5.6;
		}
		else if ( item_specific_type$ == PT_HELM )
		{
			if ( item_material$ ~= "ro" /*robe*/ )
            {
                power$ = ((power$ + 16) * power$);
            }
			else
			{
				power$ *= 8.35;
			}

		}
			else if ( item_specific_type$ == PT_GLOVES )
		{
			power$ *= 11;
		}
		else if ( item_specific_type$ == PT_BOOTS )
		{
			power$ *= 9.4;
		}
		else if ( item_material$ ~= "ro" /*robe*/ )
		{
			if ( power$ >= 6 )
			{
                power$ = (power$ * 7);
			}
			else if ( power$ >= 4 )
			{
                power$ = (power$ * 5);
			}
			else if ( power$ >= 1 )
			{
                power$ = (power$ * 3);
			}
//					power$ *= 1.5;
		}
		else if ( item_subtype$ ~= "m" /*mage*/ )
		{
			power$ *= 2.1;
		}
		else if ( item_subtype$ ~= "r" /*ranger*/ )
		{
			power$ *= 1.5;
		}
	}

	return ( power$ );
}

//////////////////////////////////////////////////////////////////////

int calc_modifier_count$( ePContentType type$ )
{
	// given the total power requested for our item, calculate the
	// number of modifiers we will need.

	// input: total_power$

	int count$ = 0;

	if ( (type$ == PT_AMULET) || (type$ == PT_RING) )
	{
		count$ = 1;
	}
	else if ( type$ == PT_WEAPON )
	{
		float chance$ = GoMath.RandomFloat( 1.0 );

		if ( (total_power$ >= 20) && (total_power$ <= 40) )
		{
			if ( chance$ <= 0.4 )
			{
				count$ = 1;
			}
			else if ( chance$ <= 0.5 )
			{
				count$ = 2;
			}
		}
		else if ( (total_power$ > 40) && (total_power$ <= 106) )
		{
			if ( chance$ <= 0.35 )
			{
				count$ = 1;
			}
			else if ( chance$ <= 0.7 )
			{
				count$ = 2;
			}
		}
		else if ( (total_power$ > 106) && (total_power$ <= 198) )
		{
			if ( chance$ <= 0.4 )
			{
				count$ = 1;
			}
			else if ( chance$ <= 0.9 )
			{
				count$ = 2;
			}
		}
			else if ( total_power$ > 198 )
		{
			if ( chance$ <= 0.35 )
			{
				count$ = 1;
			}
			else if ( chance$ <= 0.99 )
			{
				count$ = 2;
			}
		}

	}
	else if ( type$ == PT_ARMOR )
	{
		float chance$ = GoMath.RandomFloat( 1.0 );

		if ( (total_power$ >= 30) && (total_power$ <= 73) )
		{
			if ( chance$ <= 0.3 )
			{
				count$ = 1;
			}
			else if ( chance$ <= 0.4 )
			{
				count$ = 2;
			}
		}
		else if ( (total_power$ > 73) && (total_power$ <= 147) )
		{
			if ( chance$ <= 0.45 )
			{
				count$ = 1;
			}
			else if ( chance$ <= 0.7 )
			{
				count$ = 2;
			}
		}
		else if ( (total_power$ > 147) && (total_power$ <= 310) )
		{
			if ( chance$ <= 0.4 )
			{
				count$ = 1;
			}
			else if ( chance$ <= 0.9 )
			{
				count$ = 2;
			}
		}
		else if ( (total_power$ > 310) && (total_power$ <= 497) )
		{
			if ( chance$ <= 0.45 )
			{
				count$ = 1;
			}
			else if ( chance$ <= 0.99 )
			{
				count$ = 2;
			}
		}
		else if ( total_power$ > 497 )
		{
			if ( chance$ <= 0.35 )
			{
				count$ = 1;
			}
			else if ( chance$ <= 0.99 )
			{
				count$ = 2;
			}
		}
	}
	else if ( type$ == PT_SPELLBOOK )
	{
		// $$$ JAKE - MODIFY ME
		count$ = 1;
	}

	return ( count$ );
}

//////////////////////////////////////////////////////////////////////

float calc_modifier_power$( ePContentType type$ )
{
	// calculate the requested power of the new modifier

	// input: total_power$
	// input: modifier_count$

	float power$ = 0;

	if ( type$ == PT_AMULET )
	{
		power$ = total_power$ * 0.1;
	}
	else if ( type$ == PT_RING )
	{
		power$ = total_power$ * 0.05;
	}
	else if ( modifier_count$ == 1 )
	{
		power$ = GoMath.RandomFloat( 0.02, 0.25 ) * total_power$;
	}
	else if ( modifier_count$ == 2 )
	{
		power$ = GoMath.RandomFloat( 0.02, 0.125 ) * total_power$;
	}

	return ( power$ );
}

//////////////////////////////////////////////////////////////////////

float calc_modifier_biased_power$( ePContentType /*type$*/ )
{
	// this allows biasing the power of a modifier from what was
	// requested. this allows everything to be treated the same (level
	// 5 weapon same as level 5 armor) but allows lower quality
	// modifiers to be chosen if the object type is itself powerful.

	// input: modifier_power$
	// input: item_specific_type$
	// input: item_subtype$
	// input: item_material$

	float power$ = modifier_power$;

	if ( item_specific_type$ == PT_RANGED )
	{
		power$ *= 0.5;
	}
	else if ( item_specific_type$ == PT_BODY )
	{
		if ( item_material$ ~= "ro" /*robe*/ )
		{
			power$ *= 0.5;
		}
		else if ( item_subtype$ ~= "r" /*ranger*/ )
		{
			power$ *= 0.375;
		}

		else
		{
			power$ *= 0.25;
		}
	}
	else if ( item_specific_type$ == PT_GLOVES )
	{
		power$ *= 0.125;
	}
	else if ( item_specific_type$ == PT_BOOTS )
	{
		power$ *= 0.125;
	}
	else if ( item_specific_type$ == PT_HELM )
	{
		if ( item_material$ ~= "ro" /*robe*/ )
		{
			power$ *= 0.25;
		}
		else
		{
			power$ *= 0.125;
		}
	}
	else if ( item_specific_type$ == PT_SHIELD )
	{
		power$ *= 0.125;
	}

	return ( power$ );
}

//////////////////////////////////////////////////////////////////////

float calc_item_power_fuzziness$( ePContentType type$ )
{
	// when searching by power rating, this determines the fuzziness
	// on the bounds.

	// input: item_power$
	// input: item_is_normal$
	// input: item_is_rare$
	// input: item_is_unique$

	float fuzz$ = 0.0;

	if ( type$ == PT_WEAPON )
	{
		if ( item_power$ >= 30 )
		{
			fuzz$ = Math.FromPercent( 10 );
		}
		else if ( item_power$ >= 14 )
		{
			fuzz$ = Math.FromPercent( 20 );
		}
		else if ( item_power$ >= 11 )
		{
			fuzz$ = Math.FromPercent( 25 );
		}
		else if ( item_power$ >= 9 )
		{
			fuzz$ = Math.FromPercent( 35 );
		}
		else if ( item_power$ >= 7 )
		{
			fuzz$ = Math.FromPercent( 45 );
		}
		else if ( item_power$ >= 5 )
		{
			fuzz$ = Math.FromPercent( 60 );
		}
		else if ( item_power$ >= 3 )
		{
			fuzz$ = Math.FromPercent( 70 );
		}
		else if ( item_power$ >= 1 )
		{
			fuzz$ = Math.FromPercent( 100 );
		}
//				fuzz$ = Math.FromPercent( 10 );
	}
	else if ( type$ == PT_ARMOR )
	{
		if ( item_power$ >= 75 )
		{
			fuzz$ = Math.FromPercent( 20 );
		}
		else if ( item_power$ >= 21 )
		{
			fuzz$ = Math.FromPercent( 30 );
		}
		else if ( item_power$ >= 12 )
		{
			fuzz$ = Math.FromPercent( 40 );
		}
		else if ( item_power$ >= 10 )
		{
			fuzz$ = Math.FromPercent( 70 );
		}
		else if ( item_power$ >= 3 )
		{
			fuzz$ = Math.FromPercent( 50 );
		}
		else if ( item_power$ >= 2 )
		{
			fuzz$ = Math.FromPercent( 150 );
		}
		else if ( item_power$ >= 1 )
		{
			fuzz$ = Math.FromPercent( 200 );
		}
//				fuzz$ = Math.FromPercent( 15 );
	}

	return ( item_power$ * fuzz$ );
}

//////////////////////////////////////////////////////////////////////

float calc_modifier_power_fuzziness$( ePContentType /*type$*/ )
{
	// when searching by power rating, this determines the fuzziness
	// on the bounds.

	// input: modifier_power$
	// input: item_is_normal$
	// input: item_is_rare$
	// input: item_is_unique$

	float fuzz$ = 0.0;

	if ( modifier_power$ >= 70 )
	{
		fuzz$ = Math.FromPercent( 10 );
	}
	else if ( modifier_power$ >= 50 )
	{
		fuzz$ = Math.FromPercent( 15 );
	}
	else if ( modifier_power$ >= 35 )
	{
		fuzz$ = Math.FromPercent( 20 );
	}
	else if ( modifier_power$ >= 13 )
	{
		fuzz$ = Math.FromPercent( 34 );
	}
	else if ( modifier_power$ >= 2 )
	{
		fuzz$ = Math.FromPercent( 60 );
	}
	else if ( modifier_power$ >= 1 )
	{
		fuzz$ = Math.FromPercent( 100 );
	}

	return ( modifier_power$ * fuzz$ );
}

//////////////////////////////////////////////////////////////////////

ePContentType calc_general_type$
{
	// this function is called during a #*/x-y style query to determine
	// the high level type which is then subdivided based on pcontent
	// rules to get the final type.

	int chance$ = GoMath.RandomInt( 100 );
	ePContentType type$ = PT_INVALID;

	if ( chance$ <= 46 )
	{
		type$ = PT_ARMOR;
	}
	else if ( chance$ <= 92 )
	{
		type$ = PT_WEAPON;
	}
	else if ( chance$ <= 94 )
	{
		type$ = PT_AMULET;
	}
	else
	{
		type$ = PT_RING;
	}

	return ( type$ );
}

ePContentType calc_armor_coverage$( ePContentType /*type$*/ )
{
	// if asking for armor, this will calc what specific coverage to use

	int chance$ = GoMath.RandomInt( 100 );
	ePContentType coverage$ = PT_INVALID;

	if ( chance$ <= 30 )
	{
		coverage$ = PT_BODY;
	}
	else if ( chance$ <= 45 )
	{
		coverage$ = PT_HELM;
	}
	else if ( chance$ <= 65 )
	{
		coverage$ = PT_GLOVES;
	}
	else if ( chance$ <= 85 )
	{
		coverage$ = PT_BOOTS;
	}
	else
	{
		coverage$ = PT_SHIELD;
	}

	return ( coverage$ );
}

//////////////////////////////////////////////////////////////////////

float CalcModifierGoldValue$( ePContentType type$, float power1$, float power2$  )
{
	float gold1$, gold2$;
	
	//////////////////////////////////////////////////////////////////////
	// Calculate First Gold value.
	//////////////////////////
	
	// no modifier? it isn't worth any extra gold
	if( power1$ ~= 0 )
	{
		gold1$ = 0;
	}
	else // we have a modifier, figure out how much it is worth
	{
		// given an individual modifier's power level, calculate the amount
		// of gold value it contributes to the item.

		// input: modifier_power$

		float gold1$ = ((((item_power$+modifier_power_0$+modifier_power_1$) * 0.19) ** 3.6) - ((((item_power$+modifier_power_0$+modifier_power_1$)-(modifier_power_0$+modifier_power_1$) ) * 0.19 ) ** 3.6)) + 50;

		if ( type$ == PT_AMULET )
		{
			gold1$ *= 1.5;	// bias for amulets
		}
		else if ( type$ == PT_RING )
		{
			gold1$ *= 1.5;	// bias for rings
		}
	}
	
	//////////////////////////////////////////////////////////////////////
	// Calculate Second Gold value.
	//////////////////////////
	
	// no modifier? it isn't worth any extra gold
	if( power2$ ~= 0 )
	{
		gold2$ = 0;
	}
	else // we have a modifier, figure out how much it is worth
	{
		// given an individual modifier's power level, calculate the amount
		// of gold value it contributes to the item.

		// input: modifier_power$

		float gold2$ = ((((item_power$+modifier_power_0$+modifier_power_1$) * 0.19) ** 3.6) - ((((item_power$+modifier_power_0$+modifier_power_1$)-(modifier_power_0$+modifier_power_1$) ) * 0.19 ) ** 3.6)) + 50;

		if ( type$ == PT_AMULET )
		{
			gold2$ *= 1.5;	// bias for amulets
		}
		else if ( type$ == PT_RING )
		{
			gold2$ *= 1.5;	// bias for rings
		}
	}
	
	// add the value of the two modifiers together, and return that value.
	return ( gold1$ + gold2$);
}

//////////////////////////////////////////////////////////////////////

int calc_gold_value$( ePContentType type$ )
{
	// given power and the item itself, calculate the gold value of the
	// item based on its power and the power of its modifiers. note that
	// the incoming item_power is the unmodified "native" power of the 
	// item and its variation.

	// input: item_power$
	// input: item_specific_type$
	// input: item_subtype$
	// input: item_material$
	// input: item_two_handed$
	// input: modifier_power_0$;
	// input: modifier_power_1$;

	float value$ = 0;

	if ( type$ == PT_WEAPON )
	{
		if ( item_specific_type$ == PT_RANGED )
        {
            if ( item_power$ >= 6 )
			{
                value$ = 10 + (((item_power$+modifier_power_0$+modifier_power_1$) * 0.2) ** 3.7);
			}
			else if ( item_power$ >= 1 )
			{
                value$ = ((item_power$+modifier_power_0$+modifier_power_1$) * 2.2 );
			}
        }
        else if ( item_specific_type$ == PT_MELEE )
		{
            if ( item_subtype$ ~= "staff" )
            {
       			if ( item_power$ >= 6 )
				{
                    value$ = 5 + ((((item_power$+modifier_power_0$+modifier_power_1$)* 0.769) * 0.19) ** 3.6);
				}
				else if ( item_power$ >= 1 )
				{
                    value$ = (((item_power$+modifier_power_0$+modifier_power_1$)* 0.769) * 1.2 );
				}
            }
				else if ( item_two_handed$ )
			{
       			if ( item_power$ >= 6 )
				{
                    value$ = 5 + ((((item_power$+modifier_power_0$+modifier_power_1$)* 0.625) * 0.19) ** 3.6);
				}
				else if ( item_power$ >= 1 )
				{
                    value$ = (((item_power$+modifier_power_0$+modifier_power_1$)* 0.625) * 1.2 );
				}
            }
            else if ( item_power$ >= 6 )
			{
                value$ = 5 + (((item_power$+modifier_power_0$+modifier_power_1$) * 0.19) ** 3.6);
			}
			else if ( item_power$ >= 1 )
          	{
                value$ = ((item_power$+modifier_power_0$+modifier_power_1$)* 1.2 );
			}
            else
            {
                value$ = 0;
            }

/*            else if  !(item_two_handed$)
            {
                if ( item_power$ >= 6 )
				{
                    value$ = 5 + (((item_power$+modifier_power_0$+modifier_power_1$) * 0.19) ** 3.6);
				}
				else if ( item_power$ >= 1 )
            	{
                    value$ = ((item_power$+modifier_power_0$+modifier_power_1$)* 1.2 );
				}
            } */
        }
    }
/*			else if ( type$ == PT_ARMOR )
	{
		value$ = item_power$ ** 2.75;

		// $$$ jake: you can break it out based on specific type like
		//     shield, helm, etc. and you can also check the material
		//     and subtype, just as in calc_item_power$. use that
		//     function as a reference.
}          */

	else if ( type$ == PT_ARMOR )
	{
		if ( item_specific_type$ == PT_SHIELD )
		{
			value$ = 19 + (((item_power$+modifier_power_0$+modifier_power_1$) / 3) * 3) ** 1.9;
		}
		else if ( item_specific_type$ == PT_HELM )
		{
            value$ = 12 + (((item_power$+modifier_power_0$+modifier_power_1$) / 3) * 2.3) ** 2.1;
		}
			else if ( item_specific_type$ == PT_GLOVES )
		{
            value$ = 6 + (((item_power$+modifier_power_0$+modifier_power_1$) / 3) * 1.6) ** 2.1;
		}
		else if ( item_specific_type$ == PT_BOOTS )
		{
            value$ = 3 +(((item_power$+modifier_power_0$+modifier_power_1$) / 3) * 1.8) ** 2.3;
		}
		else if ( item_material$ ~= "ro" /*robe*/ )
		{
			if ( item_power$ >= 6 )
			{
                value$ = 25 + (((item_power$+modifier_power_0$+modifier_power_1$) / 3) * 2) ** 2.2;
			}
			else if ( item_power$ >= 4 )
			{
                value$ = (((item_power$+modifier_power_0$+modifier_power_1$)) ** 2.2);
			}
				else if ( item_power$ >= 1.0 )
			{
                value$ = ((item_power$+modifier_power_0$+modifier_power_1$));
			}
		}
		else if ( item_subtype$ ~= "m" /*mage*/ )
		{
			if ( item_power$ >= 11.7 )
			{
                value$ = 10 + (((item_power$+modifier_power_0$+modifier_power_1$) * 0.117 ) ** 3.5);
			}
			else if ( item_power$ >= 9.45 )
			{
                value$ = 6 + (((item_power$+modifier_power_0$+modifier_power_1$) * 0.145 ) ** 3.5);
			}
				else if ( item_power$ >= 1.0 )
			{
                value$ = (item_power$+modifier_power_0$+modifier_power_1$);
			}
		}
		else if ( item_subtype$ ~= "r" /*ranger*/ )
		{
			if ( item_power$ >= 13.0 )
			{
                value$ = 9 + (((item_power$+modifier_power_0$+modifier_power_1$) * 0.102 ) ** 3.55);
			}
			else if ( item_power$ >= 11.0 )
			{
                value$ = 6 + (((item_power$+modifier_power_0$+modifier_power_1$) * 0.11 ) ** 3.545);
			}
				else if ( item_power$ >= 1.0 )
			{
                value$ = ((item_power$+modifier_power_0$+modifier_power_1$) * 0.6 );
			}
		}
		else if ( item_subtype$ ~= "f" /*fighter*/ )
		{
			if ( item_power$ >= 14.0 )
			{
                value$ = 8 + (((item_power$+modifier_power_0$+modifier_power_1$) * 0.092 ) ** 3.539);
			}
			else if ( item_power$ >= 9.0 )
			{
                value$ = 4 + (((item_power$+modifier_power_0$+modifier_power_1$) * 0.12 ) ** 3.539);
			}
				else if ( item_power$ >= 1.0 )
			{
                value$ = ((item_power$+modifier_power_0$+modifier_power_1$) * 0.5 ) ;
			}
		}

	}

	// $ note that amulets and rings don't really have any inherent
	//   "power". only from a modifier, and it will have its own gold
	//   value.


	// add in modifier gold values (if any)
	value$ += CalcModifierGoldValue$( type$, modifier_power_0$, modifier_power_1$ );

	return ( Math.Round( value$ ) );
}

//////////////////////////////////////////////////////////////////////
