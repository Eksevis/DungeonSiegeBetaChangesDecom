//////////////////////////////////////////////////////////////////////////////
//
// File     :  generic_emitter_act.skrit
// Author(s):  Eric Tams
//
// Copyright © 2001 Gas Powered Games, Inc.  All rights reserved.
//----------------------------------------------------------------------------
//  $Revision:: $              $Date:$
//----------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////////

//
// Scid Bits Key
// 0 = Changed.
// 1 = State. true = active, false = inactive.
//

property scid   target$                             doc = "Scid of Object to play the effect on."; 
property scid   target2$                            doc = "Scid of Second Object to play the effect on."; 

property bool	start_on_creation$		= false		doc = "Start Emitter when it enters the world, otherwise must be controlled by activate/deactivate.";
property bool	run_once$				= false		doc = "Only allow this emitter to start effects one at a time.";

property float  rep_freq_min$			= -1.0		doc = "minimum time before repeating the effect, must be positive or effect won't play multiple times, be careful that the effect isn't a continuos effect if you use this.";
property float  rep_freq_max$			= -1.0		doc = "maximum time before repeating the effect, must be positive or effect won't play multiple times";

property float	time_scale$				= 1			doc = "Time scalar - factor to scale time by, won't work for all effects.";
property float	scale$		  			= 1			doc = "Scale factor - factor to scale size of effect by, won't work for all effects.";

property string event_sound$						doc = "Name of voice event sound to play";
property float  min_dist$				= 1.0		doc = "Minimum sound distance";
property float  max_dist$				= 50.0		doc = "Maximum sound distance";

property string other_effect$			= ""		doc = "put any effect in here to use it instead of a selected effect.";
property string other_params$			= ""		doc = "put any aditional params in here, will not work unless effect is made to handle this.";
property bool	geyser$					= false		doc = "use a blue geyser effect";
property bool	geyser_red$				= false		doc = "use a red geyser effect";
property bool	geyser_white$			= false		doc = "use a white geyser effect";
property bool	geyser_green$			= false		doc = "use a green geyser effect";
property bool	geyser_orange$			= false		doc = "use a orange geyser effect";
property bool	geyser_dorange$			= false		doc = "use a dark orange geyser effect";
property bool	geyser_yellow$			= false		doc = "use a yellow geyser effect";
property bool	geyser_purple$			= false		doc = "use a purple geyser effect";
property bool	geyser_drizzle$			= false		doc = "use a constant blue geyser effect";
property bool	geyser_drizzle_red$		= false		doc = "use a constant red geyser effect";
property bool	geyser_drizzle_white$	= false		doc = "use a constant white geyser effect";
property bool	geyser_drizzle_green$	= false		doc = "use a constant green geyser effect";
property bool	geyser_drizzle_orange$	= false		doc = "use a constant orange geyser effect";
property bool	geyser_drizzle_dorange$	= false		doc = "use a constant dark orange geyser effect";
property bool	geyser_drizzle_yellow$	= false		doc = "use a constant yellow geyser effect";
property bool	geyser_drizzle_purple$	= false		doc = "use a constant purple geyser effect";
property bool	water_splash$			= false		doc = "use a water splash effect";
property bool	water_wave$				= false		doc = "use a water wave effect";
property bool	ice_explosion$			= false		doc = "use an ice explosion effect";
property bool	dust_explosion$			= false		doc = "use a dust explosion effect";
property bool	dust_explosion_small$	= false		doc = "use a small dust explosion effect";
property bool	generic_explosion$		= false		doc = "use a generic explosion effect";
property bool	coil_explosion$			= false		doc = "use the tessla coil's explosion effect";
property bool	barrel_explosion$		= false		doc = "use the barrel explosion effect";
property bool	pebbles$				= false		doc = "use the pebble effect";
property bool	pebbles_directional$	= false		doc = "use the directional pebble effect";
property bool	swamp_gas_puff$			= false		doc = "use the swamp gas puff effect";

owner = GoSkritComponent;

#include "k_inc_generic_emitter" 

SFxSID active_script_id$ = 0;

startup state Start$
{
	event OnGoHandleMessage$( eWorldEvent e$, WorldMessage /*msg$*/ )
	{
		if( e$ == WE_ENTERED_WORLD ) 
		{
			PackParams$();
			
			if( effect$ == "" )
			{
				report.ErrorF( "Bad Effect in Emitter 0x%x\n", MakeInt( owner.scid ) );
				SetState Finished$;
				return;
			}
			
			if( !Godb.GetScidBit( owner.scid, 0 ) ) // nothing has changed. In the default state.
			{
				if (start_on_creation$ == true)
				{
					SetState Active$;
					return;		
				}
			}
			else if ( Godb.GetScidBit( owner.scid, 1 ) ) // emitter was active when it streamed out turn it back on.
			{
				SetState Active$;
			}
			
			// We didn't get started, just go to the Idle state and wait for an activate.
			SetState Idle$;
		}
	}
}

trigger OnGoHandleMessage$( WE_REQ_DEACTIVATE )
{
	if (active_script_id$ != 0)
	{
		// Let the effect know that it should finish what it is doing and not spawn anything else
		SiegeFx.SStopScript( active_script_id$ );
	
		// Clear the script id
		active_script_id$ = null;
	}
	SetState Idle$;
}

state Active$
{
	trigger OnTimer$( 1 )
	{
		SetState Active$;
	}
	
	event OnEnterState$
	{
		// if we are a repeating effect only play if we can be seen.
		
		if ( !Godb.GetScidBit( owner.scid, 1 ) || ( owner.go.WasInViewFrustumRecently ) )
		{
			// Run the generic script
			if ( target$.goid.isvalid() )
			{
				if ( target2$.goid.isvalid() )
				{
					active_script_id$ =	SiegeFx.SRunScript( effect$, target2$.goid, target$.goid, params$, owner.Goid, WE_REQ_ACTIVATE );
				}
				else
				{
					active_script_id$ =	SiegeFx.SRunScript( effect$, target$.goid, target$.goid, params$, owner.Goid, WE_REQ_ACTIVATE );
				}
			}
			else
			{
				active_script_id$ =	SiegeFx.SRunScript( effect$, owner.Goid, owner.Goid, params$, owner.Goid, WE_REQ_ACTIVATE );
			}
			if( !StringTool.IsEmpty( event_sound$ ) )
			{
				owner.Go.PlayVoiceSound( event_sound$, min_dist$, max_dist$, false );
			}
			
			// Set the used Bits
			Godb.SetScidBit( owner.scid, 0, true );
			
			// Set the active Bits
			Godb.SetScidBit( owner.scid, 1, true );
		}
		
		if( ( rep_freq_min$ > 0.0 ) && ( rep_freq_max$ > 0.0 ))
		{
			float random_delay$ = Math.RandomFloat( rep_freq_min$, rep_freq_max$ );
			this.CreateTimer( 1, random_delay$ );
		}
		else
		{
			if( !run_once$ )
			{
				SetState Idle$;
			}
		}
	}
}

state Idle$
{
	trigger OnGoHandleMessage$( WE_REQ_ACTIVATE )
	{
		SetState Active$;
	}
	
	event OnEnterState$
	{
		// Set the active Bits
		Godb.SetScidBit( owner.scid, 1, false );
	}
}

state Finished$
{
}