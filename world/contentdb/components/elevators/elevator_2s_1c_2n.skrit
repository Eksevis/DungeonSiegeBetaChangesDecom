//////////////////////////////////////////////////////////////////////////////
//
// File     :  elevator_2s_1c_2n.skrit
// Author(s):  James Loe
//
// Copyright © 2000 Gas Powered Games, Inc.  All rights reserved.
//----------------------------------------------------------------------------
//  $Revision:: $              $Date:$
//----------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// public definitions

// reserved tags
property bool			_server_only$			= true;
property string			_doc$					= "2-state, 1-connection, 2-node elevator";
property string			_required_component$	= "placement";

// exported properties
property SiegeId		elevator_node$			= 0						doc = "Node used for transition";
property int			elevator_door_level1$	= 0						doc = "Door used for connection with connect_node at level 1";
property int			elevator_door_level2$	= 0						doc = "Door used for connection with connect_node at level 2";

property SiegeId		connect_node_level1$	= 0						doc = "Node used for stable connection at level 1";
property int			connect_door_level1$	= 0						doc = "Door used for connection with elevator_node at level 1";

property SiegeId		connect_node_level2$	= 0						doc = "Node used for stable connection at level 2";
property int			connect_door_level2$	= 0						doc = "Door used for connection with elevator_node at level 2";

property float			duration$				= 0						doc = "Length (in seconds) of transition";

property bool			level1_waitfortrigger$	= true					doc = "Wait for activated message before continuing to level 2";
property bool			level2_waitfortrigger$	= true					doc = "Wait for activated message before continuing to level 1";

property bool			level1_connectpaths$	= true					doc = "Connect pathing information on level 1";
property bool			level2_connectpaths$	= true					doc = "Connect pathing information on level 2";

property eAxisHint		level1_trans2_hint$		= AH_NONE				doc = "Transition from level 1 to level 2 rotation hint (AH_NONE,AH_XAXIS_POSITIVE,AH_XAXIS_NEGATIVE,AH_YAXIS_POSITIVE,AH_YAXIS_NEGATIVE,AH_ZAXIS_POSITIVE,AH_ZAXIS_NEGATIVE)";
property eAxisHint		level2_trans1_hint$		= AH_NONE				doc = "Transition from level 2 to level 1 rotation hint";

property eWorldEvent	Level1_Message$			= WE_REQ_ACTIVATE		doc = "Trans1 World Message to Send.";
property scid      		Level1_Scid$									doc = "Scid of External Object during first transition.";
property float			Level1_Message_Delay$							doc = "Delay before sending message.";

property eWorldEvent	Level2_Message$			= WE_REQ_ACTIVATE 		doc = "Trans2 World Message to Send.";
property scid      		Level2_Scid$									doc = "Scid of External Trigger during second transition.";
property float			Level2_Message_Delay$							doc = "Delay before sending message.";

property eWorldEvent	Moving1_Message$		= WE_REQ_ACTIVATE		doc = "Up World Message to Send.";
property scid      		Moving1_Scid$									doc = "Scid of External Trigger during up position.";
property float			Moving1_Message_Delay$							doc = "Delay before sending message.";

property eWorldEvent	Moving2_Message$		= WE_REQ_ACTIVATE	 	doc = "Down World Message to Send.";
property scid			Moving2_Scid$									doc = "Scid of External Trigger during down position.";
property float			Moving2_Message_Delay$							doc = "Delay before sending message.";

bool                    bPermanentDeactivate$   = false;
owner                                           = GoSkritComponent;

//////////////////////////////////////////////////////////////////////////////

trigger OnGoDrawDebugHud$
{
	Goid goid1$ = Level1_Scid$.Goid;
	Goid goid2$ = Moving1_Scid$.Goid;
	Goid goid3$ = Level2_Scid$.Goid;
	Goid goid4$ = Moving2_Scid$.Goid;

	if( goid1$.IsValid )
	{
		World.DrawDebugDirectedLine( owner.go.Placement.Position,
									 goid1$.go.Placement.Position,
									 MakeColor( 0, 1.0, 0, 0.5 ),
									 ToString( Level1_Message$ ) );
	}

	if( goid2$.IsValid )
	{
		World.DrawDebugDirectedLine( owner.go.Placement.Position,
									 goid2$.go.Placement.Position,
									 MakeColor( 1.0, 1.0, 0, 0.5 ),
									 ToString( Moving1_Message$ ) );
	}

	if( goid3$.IsValid )
	{
		World.DrawDebugDirectedLine( owner.go.Placement.Position,
									 goid3$.go.Placement.Position,
									 MakeColor( 0, 1.0, 0, 0.5 ),
									 ToString( Level2_Message$ ) );
	}

	if( goid4$.IsValid )
	{
		World.DrawDebugDirectedLine( owner.go.Placement.Position,
									 goid4$.go.Placement.Position,
									 MakeColor( 1.0, 1.0, 0, 0.5 ),
									 ToString( Moving2_Message$ ) );
	}
}

trigger OnGoHandleMessage$( WE_REQ_DEACTIVATE )
{
	bPermanentDeactivate$	= true;
	SetState Deactivated$;
}

state Deactivated$
{
}

startup state L1_Wait$
{
	transition
	{
		-> L1_Moving$: OnGoHandleMessage( WE_REQ_USE );
		-> L1_Moving$: OnGoHandleMessage( WE_REQ_ACTIVATE );
	}

	event OnEnterState$
	{
		if( level1_waitfortrigger$ == false )
		{
			SetState L1_Moving$;
		}
	}

	event OnExitState$
	{
		if( !bPermanentDeactivate$ )
		{
			WorldTerrain.SRequestNodeTransition( elevator_node$, elevator_door_level2$,
												 connect_node_level2$, connect_door_level2$,
												 duration$, level1_trans2_hint$, owner.Go.Goid, level2_connectpaths$ );
			
			if ( Moving1_Scid$.IsValid() && Moving1_Scid$.getgoid.isvalid() )
			{
				PostWorldMessage( Moving1_Message$, Moving1_Scid$, Moving1_Message_Delay$ );
			}
		}
	}
}

state L1_Moving$
{
	transition -> L2_Wait$: OnGoHandleMessage( WE_TERRAIN_TRANSITION_DONE ) =
	{
    	if ( Level2_Scid$.IsValid() && Level2_Scid$.getgoid.isvalid() )
        {
			PostWorldMessage( Level2_Message$, Level2_Scid$, Level2_Message_Delay$);
        }

	}
}

state L2_Wait$
{
	transition
	{
		-> L2_Moving$: OnGoHandleMessage( WE_REQ_USE );
		-> L2_Moving$: OnGoHandleMessage( WE_REQ_ACTIVATE );
	}

	event OnEnterState$
	{
		if( level2_waitfortrigger$ == false )
		{
			SetState L2_Moving$;
		}
	}

	event OnExitState$
	{
		if( !bPermanentDeactivate$ )
		{
			WorldTerrain.SRequestNodeTransition( elevator_node$, elevator_door_level1$,
												 connect_node_level1$, connect_door_level1$,
												 duration$, level2_trans1_hint$, owner.Go.Goid, level1_connectpaths$ );
		
			if ( Moving2_Scid$.IsValid && Moving2_Scid$.getgoid.isvalid() )
      		{
				PostWorldMessage( Moving2_Message$, Moving2_Scid$, Moving2_Message_Delay$);
			}
		}
	}
}

state L2_Moving$
{
	transition -> L1_Wait$: OnGoHandleMessage( WE_TERRAIN_TRANSITION_DONE ) =
	{
    	if ( Level1_Scid$.IsValid() && Level1_Scid$.getgoid.isvalid() )
        {
			PostWorldMessage( Level1_Message$, Level1_Scid$, Level1_Message_Delay$ );
        }
	}
}

//////////////////////////////////////////////////////////////////////////////