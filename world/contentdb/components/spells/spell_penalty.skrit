//////////////////////////////////////////////////////////////////////////////
//
// File     :  spell_penalty.skrit
// Author(s):  Eric Tams
//
// Copyright © 2001 Gas Powered Games, Inc.  All rights reserved.
//----------------------------------------------------------------------------
//  $Revision:: $              $Date:$
//----------------------------------------------------------------------------
//
// any spell penalties that aren't easy to do through enchantments should go here.
//
//////////////////////////////////////////////////////////////////////////////

property bool 	effect_caster$		= false doc = "Apply penalty to caster instead of target.";
property float	decrease_health$	= 0.0	doc = "Amount to decrease health by 0-1.";

property string effect_script$		= ""	doc = "Name of the SiegeFx script that will be providing the visual.";
property string effect_params$		= ""   	doc = "Parameters to send to SiegeFx script";
property string description$		= ""	doc = "Description of enchantment being applied";
property string state_name$			= ""	doc = "Name of effect to use as a generic state and as a screen name.";

owner = GoSkritComponent;
Goid 	target$;
Goid 	caster$;
float	spell_duration$;
int		active_effect$ = 0;

startup state CastBegin$
{
	transition -> RestoreState$ :  OnTimer( 1 );

	event OnGoHandleMessage$( eWorldEvent e$, WorldMessage msg$ )
	{
		if( e$ == WE_REQ_CAST ) {
			
			// figure out out targets.
			caster$ = msg$.GetSendFrom();
			
			// if the caster takes the penalty, then the caster is the target
			if( effect_caster$ )
			{
				target$ = msg$.GetSendFrom();
			} else {
				target$ = MakeGoid( msg$.GetData1() );
			}
			
			// calculate how long the effect should last
			spell_duration$ = owner.Go.Magic.EvaluateEffectDuration(target$, caster$);
			
			// if we are already effected by this then bail.
			if( target$.Go.Actor.HasGenericState( state_name$ ) ) {
				SetState( Abort$ );
			} else {
				
				// apply the penalty
				if (decrease_health$ > 0.0)
				{
					float life$ = target$.Go.Aspect.CurrentLife;
					life$ *= (1 - decrease_health$);
					target$.Go.Aspect.RCSetCurrentLife( life$ );
				}
				// Start the visual
				active_effect$ = SiegeFx.SRunScript( effect_script$, target$, caster$, effect_params$, owner.Goid, e$ );
				
				// add status effect.
				target$.Go.Actor.AddGenericState( state_name$, state_name$, description$, spell_duration$, caster$ );
				
				// create a timer so we know when to end the effect.
				this.CreateTimer( 1, spell_duration$ );
			}		
		}
	}
}

state RestoreState$
{
	event OnEnterState$
	{
		// If the go is still alive then restore his state
		if( target$.IsValid ) {
			// remove the state so this can be affected again
			target$.Go.Actor.RemoveGenericState( state_name$ );
			
			if (active_effect$ != 0)
			{
				SiegeFx.StopScript( active_effect$ );
			}
		}
		SetState( Finished$ );
	}
}

state Abort$
{
	event OnEnterState$
	{
		// Refund the players mana
		Rules.ChangeMana( caster$, owner.go.getmagic.manacost );

		SetState( Finished$ );
	}
}


state Finished$
{
	event OnEnterState$
	{
		// Delete this skrit
		PostWorldMessage( WE_REQ_DELETE, owner.Goid, 1 );
	}
}