//***************************************************************************/
//*
//*	File	 :	presave.skrit
//*	Author(s):	Bryce Jones
//*
//*	Copyright ©	2001 Gas Powered Games,	Inc.  All rights reserved.
//*--------------------------------------------------------------------------/
//*	 $Revision:: $				$Date:$
//*--------------------------------------------------------------------------/
//***************************************************************************/

/****************************************************************************/
/*Properties																*/
/****************************************************************************/
property int SaveGames$ = 20	doc ="Number of savegames to generate -- 	Corresponds to number of presaves in the console.gas";

/****************************************************************************/
/*global Variables															*/
/****************************************************************************/


int 	Iterator$;
go		party$;



/****************************************************************************/
/*Supporting Functions														*/
/****************************************************************************/

void FillHealthAndMana$(go ActorGo$)
{
	float 	MaxLife$ = ActorGo$.aspect.GetMaxLife();
	float	MaxMana$ = ActorGo$.aspect.GetMaxMana();
	ActorGo$.aspect.SSetCurrentMana(MaxMana$);
	ActorGo$.aspect.SSetCurrentLife(MaxLife$);
}



/****************************************************************************/
/*State	Machine	Section														*/
/****************************************************************************/



startup state InitialState$ trigger OnBotHandleMessage$( WE_WORLD_STATE_TRANSITION_DONE )
{
	if ( (WorldState.CurrentState == WS_SP_INGAME) || (WorldState.CurrentState == WS_MP_INGAME) )
	{
		report.enable("generic");
		
		setstate WaitForNisToEnd$;
	}
}

state WaitForNisToEnd$
{
	InGame$ at( 15 frames )
	{
		report.report("Generic","\nEntered WaitForNisToEnd State");
		if (WorldState.CurrentState == WS_SP_INGAME)
		{
			setstate Setup$;
		}
		else
		{
			setstate WaitforNisToEnd$;
		}
	}
}



state Setup$
{
	InGame2$ at( 5 frames )
	{
		gpconsole.execute("exec add pre_saved");
		report.report("Generic","\n=================Executed add pre_saved============");
		Iterator$ = 1;
		setstate ChangeRegion$;
	}
	
}

state ChangeRegion$
{
	InGame6$ at( 2 )
	{
		report.reportf("Generic","\n%d Time(s) Through the state loop",Iterator$);
		if (Iterator$ > SaveGames$)
		{
			report.report("Generic","\n!!!!!!!!!! Iterator is larger than savegames Calling Exit");
			setstate Exit$;
		}
		else
		{
			report.report("Generic","\nIterator is less than savegames Calling teleport");
			string sTeleport$ = "";
			stringtool.assignf(sTeleport$,"exec pre_saved_%02d_teleport",Iterator$ );
			report.reportf("Generic","\n=================Executing %s============",sTeleport$);
			gpconsole.execute(sTeleport$);
			report.report("Generic","\n=================DONE============");
			setstate PartyOperations$;
		}

	}
}
	


state PartyOperations$

{
	InGame3$ at( 4 )
	{
		string sBuildParty$ = "";
		stringtool.Assignf(sBuildParty$,"exec pre_saved_%02d_buildparty",Iterator$);
		report.reportf("Generic","\n=================Executing %s============",sBuildParty$);
		gpconsole.execute(sBuildParty$);
		godb.DeselectAll();
		setstate BuffParty$;
	}
}
state BuffParty$
{
	transition -> savegame$: OnTimer( 1 );
	
	InGame7$ at( 1 )
	{
		party$ = Server.GetScreenParty();
		if (! party$.children.get(0).IsSelected())
		{
			party$.children.get(0).Select();										//select the hero
		}
		string sHero$ = "";
		stringtool.assignf(sHero$,"exec pre_saved_%02d_hero",Iterator$);  //Equip the hero
		gpconsole.execute(sHero$);
		report.report("Generic","\n=================Buffed the Hero============");
		FillHealthAndMana$(party$.children.get(0));
		party$.children.get(0).Deselect();
		
		//Buff the rest of the party
		int i$ = 1;													//start iteration from first in party
		while( i$ < party$.children.Size() )
		{
			if (! party$.children.get(i$).IsSelected())
			{
				party$.children.get(i$).Select();										//select the hero
			}
			string sMember$ = "";
			stringtool.appendf(sMember$,"exec pre_saved_%02d_member_%02d",Iterator$,i$);
			gpconsole.execute(sMember$);
			report.reportf("Generic","\n=================Executing %s============",sMember$);
			
			FillHealthAndMana$(party$.children.get(i$));
			party$.children.get(i$).Deselect();
			i$ += 1;
		}
		this.CreateTimer( 1, 3.0 );
	}
}

state SaveGame$
{
	InGame4$ at( 2 )
	{
		string	sCurrentSaveGameName$ = "";
		string  sIsRetail$ = "";
		
		if (config.getbool("force_retail_content"))
		{
			sIsRetail$ = "Retail";
		}
		else
		{
			sIsRetail$ = "Dev";
 		}
 
		stringtool.assignf(sCurrentSaveGameName$,"%s_PreSaved_%02d",sIsRetail$, Iterator$);
		game.savegame(sCurrentSaveGameName$);
		setstate PartyCleanup$;
	}	
}

State PartyCleanUp$
{
	InGame5$ at(4)
	{
		party$ = Server.GetScreenParty();
		int PartyCounter$ = party$.children.Size() -1 ;
		
		while( PartyCounter$ > 0 )
		{
			godb.SMarkGoAndChildrenFordeletion(party$.children.get(PartyCounter$));
			PartyCounter$ -= 1;
		}
		
		go hero$ = party$.children.get(0);
		gopcoll HeroChildren$ = hero$.children;
		int ChildCount$ = HeroChildren$.size()-1;
		while (ChildCount$ > 1)
		{
			godb.SMarkfordeletion(HeroChildren$.get(ChildCount$));
			ChildCount$ -= 1;
		}
		Iterator$ += 1;
		setstate ChangeRegion$;
	}
}
state Exit$
{
	trigger OnEnterState$
	{
		gpconsole.execute("exit");
	}
}



